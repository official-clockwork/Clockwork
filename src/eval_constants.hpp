#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(280, 435);
inline const PParam KNIGHT_MAT = S(963, 1001);
inline const PParam BISHOP_MAT = S(977, 1070);
inline const PParam ROOK_MAT   = S(1478, 1798);
inline const PParam QUEEN_MAT  = S(3224, 3265);
inline const PParam TEMPO_VAL  = S(46, 17);

inline const PParam BISHOP_PAIR_VAL  = S(63, 188);
inline const PParam DOUBLED_PAWN_VAL = S(-49, -75);

inline const PParam POTENTIAL_CHECKER_VAL = S(-73, -1);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(2, 21), S(50, 26), S(84, 62), S(200, 120), S(455, 375), S(1762, 1275),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(49, 49), S(54, 23), S(54, 37), S(99, 114), S(664, -144),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-30, 31), S(-30, 40), S(-19, 80), S(49, 136), S(101, 252), S(161, 70),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(43, -31), S(22, 11), S(-1, 48), S(4, 87), S(76, 169), S(136, 297),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(14, -37), S(-3, 3), S(-31, -34), S(-17, -80), S(-49, -112), S(-214, -153),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-206, -183), S(-106, -126), S(-52, -33), S(2, -5), S(44, 8), S(68, 55), S(100, 57), S(129, 59), S(176, -27),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-124, -262), S(-79, -177), S(-20, -118), S(-5, -65), S(25, -29), S(41, -10), S(68, 4), S(77, 12), S(87, 24), S(86, 15), S(108, 7), S(163, -50), S(211, -67), S(283, -95),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-202, -340), S(-85, -126), S(-47, -50), S(-23, -48), S(-6, -9), S(1, -4), S(24, 9), S(51, 8), S(74, 22), S(104, 28), S(123, 25), S(138, 35), S(187, 28), S(167, 18), S(273, -74),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(72, 103), S(-653, 611), S(-204, -413), S(-143, -219), S(-107, -268), S(-68, -216), S(-106, -14), S(-86, -48), S(-66, -18), S(-69, 5), S(-51, 39), S(-55, 68), S(-30, 48), S(-27, 51), S(-12, 58), S(-8, 40), S(-19, 68), S(4, 33), S(15, 21), S(58, -27), S(91, -70), S(128, -143), S(217, -214), S(415, -399), S(366, -411), S(965, -714), S(741, -623), S(1330, -984),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(364, 729), S(89, 422), S(24, 476), S(22, 510), S(8, 506), S(-18, 486), S(-4, 496), S(3, 467), S(52, 350),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(81, -44), S(152, -87),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(32, 2), S(139, -42),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(66, -63), S(87, -82), S(139, -79), S(154, -129),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-54, 38), S(-71, 49), S(6, -26), S(177, -110), S(418, -267),
};

inline const PParam PAWN_THREAT_KNIGHT = S(206, 71);
inline const PParam PAWN_THREAT_BISHOP = S(177, 81);
inline const PParam PAWN_THREAT_ROOK   = S(159, 46);
inline const PParam PAWN_THREAT_QUEEN  = S(137, -84);

inline const PParam KNIGHT_THREAT_BISHOP = S(78, 66);
inline const PParam KNIGHT_THREAT_ROOK   = S(227, -6);
inline const PParam KNIGHT_THREAT_QUEEN  = S(130, -74);

inline const PParam BISHOP_THREAT_KNIGHT = S(87, 24);
inline const PParam BISHOP_THREAT_ROOK   = S(211, 42);
inline const PParam BISHOP_THREAT_QUEEN  = S(178, 28);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-46, 463),    S(87, 470),     S(197, 429),    S(369, 221),    S(303, 252),    S(288, 340),    S(161, 375),    S(247, 367),    //
    S(26, 0),       S(187, 15),     S(122, -58),    S(156, -160),   S(77, -163),    S(14, -79),     S(-21, -11),    S(-58, -13),    //
    S(-41, -57),    S(-26, -53),    S(-29, -100),   S(-33, -134),   S(-54, -140),   S(-92, -133),   S(-109, -52),   S(-126, -29),   //
    S(-35, -136),   S(-19, -101),   S(-44, -135),   S(-51, -143),   S(-70, -155),   S(-100, -132),  S(-140, -64),   S(-155, -84),   //
    S(-35, -170),   S(30, -163),    S(-30, -124),   S(-92, -108),   S(-82, -125),   S(-131, -128),  S(-141, -100),  S(-171, -103),  //
    S(-23, -170),   S(132, -167),   S(42, -124),    S(-53, -85),    S(-76, -144),   S(-97, -124),   S(-112, -78),   S(-146, -101),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-406, -154),  S(-74, -80),    S(-556, 316),   S(-56, 62),     S(-333, 160),   S(-369, 172),   S(-411, -14),   S(-537, 40),    //
    S(52, -10),     S(79, 65),      S(204, -46),    S(38, 81),      S(91, 58),      S(47, 9),       S(-42, 19),     S(12, -42),     //
    S(48, 38),      S(7, 134),      S(217, 67),     S(90, 101),     S(139, 64),     S(28, 63),      S(28, 36),      S(-56, 23),     //
    S(107, 44),     S(41, 100),     S(87, 102),     S(74, 119),     S(78, 82),      S(77, 80),      S(1, 27),       S(23, 53),      //
    S(78, 23),      S(108, 34),     S(86, 62),      S(51, 63),      S(50, 78),      S(48, 69),      S(8, 30),       S(18, -54),     //
    S(2, -22),      S(28, -32),     S(13, -22),     S(39, 46),      S(53, 41),      S(-32, 0),      S(-30, -15),    S(-59, -16),    //
    S(20, 61),      S(55, -17),     S(-9, -20),     S(-12, 12),     S(-16, -8),     S(-41, -40),    S(-16, -63),    S(-108, -141),  //
    S(-37, -28),    S(3, -20),      S(59, -96),     S(32, -35),     S(67, -52),     S(7, -146),     S(-51, -43),    S(-163, -83),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-105, 108),   S(-48, 36),     S(-549, 133),   S(-284, 125),   S(-300, 142),   S(-416, 146),   S(4, 83),       S(-14, 61),     //
    S(15, -26),     S(-6, 75),      S(20, 58),      S(24, 28),      S(24, 46),      S(13, 63),      S(1, 47),       S(-53, 54),     //
    S(17, 78),      S(68, 81),      S(275, 45),     S(129, 41),     S(81, 55),      S(17, 88),      S(141, 31),     S(8, 82),       //
    S(28, 22),      S(34, 78),      S(132, 49),     S(124, 67),     S(136, 73),     S(53, 75),      S(45, 55),      S(-42, 72),     //
    S(32, -13),     S(41, 43),      S(57, 36),      S(82, 63),      S(81, 98),      S(34, 71),      S(37, 17),      S(24, -41),     //
    S(71, -23),     S(113, 3),      S(109, 2),      S(36, 54),      S(33, 66),      S(22, 78),      S(81, 3),       S(39, -43),     //
    S(37, -67),     S(110, -33),    S(63, -20),     S(39, 17),      S(29, -11),     S(55, -27),     S(2, 6),        S(69, -125),    //
    S(46, -16),     S(38, -4),      S(20, 19),      S(22, -40),     S(12, -40),     S(29, -8),      S(46, -91),     S(-37, 0),      //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(126, 31),     S(217, 21),     S(124, 73),     S(90, 86),      S(115, 61),     S(73, 65),      S(91, 57),      S(107, 66),     //
    S(135, 65),     S(182, 57),     S(258, 34),     S(166, 91),     S(155, 83),     S(77, 111),     S(32, 103),     S(54, 106),     //
    S(49, 85),      S(306, 14),     S(258, 12),     S(267, 12),     S(167, 42),     S(84, 80),      S(132, 53),     S(-16, 102),    //
    S(9, 73),       S(64, 65),      S(90, 39),      S(143, -2),     S(110, 26),     S(45, 89),      S(24, 76),      S(-69, 88),     //
    S(-105, 24),    S(21, 3),       S(-2, 38),      S(-4, 28),      S(-5, 28),      S(-50, 78),     S(-89, 82),     S(-115, 67),    //
    S(-99, 1),      S(19, -79),     S(-15, -23),    S(-38, -1),     S(-17, -36),    S(-95, 36),     S(-109, 16),    S(-114, 9),     //
    S(-152, 24),    S(-70, -36),    S(-33, -42),    S(-29, -42),    S(-40, -19),    S(-54, -27),    S(-111, -41),   S(-115, -39),   //
    S(-120, 7),     S(-83, 23),     S(-49, -14),    S(-18, -41),    S(-26, -18),    S(-34, -23),    S(-59, -41),    S(-81, -7),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(38, 96),      S(81, 35),      S(99, 59),      S(-69, 218),    S(-2, 117),     S(-64, 164),    S(50, 46),      S(-15, 43),     //
    S(86, 73),      S(-85, 236),    S(-41, 291),    S(-137, 334),   S(-94, 238),    S(-139, 265),   S(-70, 131),    S(-8, 42),      //
    S(-31, 187),    S(104, 150),    S(58, 203),     S(-5, 261),     S(-30, 210),    S(-67, 223),    S(13, 89),      S(-14, 25),     //
    S(52, 75),      S(36, 160),     S(26, 163),     S(0, 231),      S(-5, 205),     S(0, 111),      S(9, 52),       S(-14, 71),     //
    S(27, 102),     S(58, 70),      S(31, 136),     S(4, 173),      S(-20, 184),    S(-22, 132),    S(-12, 31),     S(-8, -16),     //
    S(63, -127),    S(62, -9),      S(46, 55),      S(-34, 121),    S(12, 42),      S(3, 51),       S(28, -51),     S(-4, -32),     //
    S(53, -239),    S(48, -290),    S(21, -122),    S(46, -38),     S(-2, -2),      S(44, -128),    S(30, -55),     S(-12, -34),    //
    S(-86, -22),    S(-77, -328),   S(-12, -286),   S(8, -202),     S(41, -113),    S(57, -208),    S(36, -155),    S(-16, -55),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(434, -665),   S(271, -143),   S(-61, -8),     S(-146, 67),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(378, -158),   S(60, 107),     S(-31, 155),    S(279, 76),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-5, 52),      S(119, 136),    S(178, 126),    S(219, 59),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-216, 88),    S(7, 131),      S(150, 133),    S(105, 97),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-185, 30),    S(-21, 87),     S(42, 96),      S(-25, 139),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-138, -10),   S(74, 5),       S(-27, 70),     S(-72, 122),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(97, -96),     S(127, -39),    S(19, 34),      S(-96, 96),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-20, -162),   S(83, -123),    S(-53, -81),    S(-11, -102),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
