#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(281, 450);
inline const PScore KNIGHT_MAT = S(956, 1001);
inline const PScore BISHOP_MAT = S(972, 1074);
inline const PScore ROOK_MAT   = S(1452, 1809);
inline const PScore QUEEN_MAT  = S(3176, 3284);
inline const PScore TEMPO_VAL  = S(37, 18);

inline const PScore BISHOP_PAIR_VAL  = S(73, 197);
inline const PScore DOUBLED_PAWN_VAL = S(-47, -74);

inline const PScore POTENTIAL_CHECKER_VAL = S(-73, -1);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(1, 22), S(53, 26), S(82, 70), S(193, 146), S(482, 570), S(1760, 1464),
};
inline const std::array<PScore, 5> DEFENDED_PAWN = {
    S(49, 47), S(51, 21), S(57, 39), S(103, 110), S(658, -135),
};
inline const std::array<PScore, 6> PASSED_PAWN = {
    S(-2, 3), S(-22, 39), S(-27, 89), S(42, 140), S(72, 246), S(17, 40),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-219, -196), S(-116, -134), S(-60, -35), S(-9, -7), S(39, 15), S(57, 59), S(91, 57), S(115, 52), S(168, -27),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-137, -276), S(-82, -183), S(-23, -120), S(-9, -64), S(26, -30), S(42, -9), S(67, 2), S(73, 13), S(79, 24), S(80, 21), S(104, 10), S(160, -47), S(195, -57), S(264, -90),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-220, -329), S(-90, -115), S(-45, -39), S(-24, -43), S(-8, -9), S(3, 6), S(23, 14), S(52, 11), S(76, 22), S(102, 28), S(127, 27), S(138, 31), S(186, 19), S(173, 20), S(272, -70),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(66, 101), S(-623, 540), S(-212, -396), S(-157, -215), S(-115, -258), S(-79, -212), S(-120, -20), S(-93, -44), S(-78, -14), S(-77, 14), S(-68, 34), S(-68, 67), S(-43, 54), S(-33, 51), S(-22, 53), S(-11, 50), S(-25, 71), S(-1, 34), S(8, 20), S(43, -32), S(84, -80), S(114, -139), S(214, -213), S(411, -415), S(377, -420), S(949, -709), S(735, -630), S(1387, -1017),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(389, 803), S(86, 441), S(16, 487), S(20, 517), S(0, 507), S(-25, 483), S(-7, 495), S(0, 464), S(51, 342),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(88, -39), S(158, -89),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(21, 3), S(125, -39),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(67, -64), S(90, -81), S(138, -79), S(156, -128),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-53, 37), S(-73, 46), S(9, -29), S(181, -122), S(415, -271),
};

inline const PScore PAWN_THREAT_KNIGHT = S(193, 71);
inline const PScore PAWN_THREAT_BISHOP = S(178, 76);
inline const PScore PAWN_THREAT_ROOK = S(160, 48);
inline const PScore PAWN_THREAT_QUEEN = S(126, -65);
inline const std::array<PScore, 48> PAWN_PSQT = {
    S(-115, 487),   S(14, 491),     S(160, 439),    S(318, 215),    S(265, 234),    S(284, 323),    S(154, 368),    S(225, 356),    //
    S(13, -8),      S(177, 11),     S(112, -68),    S(145, -179),   S(70, -177),    S(12, -93),     S(-34, -14),    S(-54, -23),    //
    S(-43, -70),    S(-30, -64),    S(-26, -110),   S(-40, -141),   S(-52, -142),   S(-99, -139),   S(-111, -67),   S(-134, -46),   //
    S(-39, -146),   S(-19, -111),   S(-54, -153),   S(-56, -154),   S(-73, -162),   S(-106, -143),  S(-146, -73),   S(-155, -93),   //
    S(-33, -181),   S(29, -178),    S(-33, -134),   S(-93, -122),   S(-88, -143),   S(-136, -135),  S(-142, -108),  S(-173, -114),  //
    S(-30, -181),   S(124, -180),   S(42, -138),    S(-58, -100),   S(-78, -155),   S(-101, -131),  S(-113, -86),   S(-150, -106),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-401, -150),  S(-81, -69),    S(-555, 320),   S(-20, 59),     S(-335, 161),   S(-349, 181),   S(-404, -11),   S(-531, 53),    //
    S(86, -27),     S(98, 62),      S(270, -74),    S(55, 73),      S(133, 38),     S(115, -19),    S(-15, 18),     S(41, -49),     //
    S(30, 33),      S(36, 115),     S(231, 64),     S(141, 85),     S(178, 56),     S(54, 69),      S(69, 34),      S(-60, 16),     //
    S(117, 42),     S(35, 106),     S(91, 104),     S(64, 128),     S(82, 88),      S(70, 83),      S(4, 35),       S(16, 47),      //
    S(82, 27),      S(105, 37),     S(78, 73),      S(40, 72),      S(38, 84),      S(49, 84),      S(7, 38),       S(24, -59),     //
    S(-11, -15),    S(23, -29),     S(4, -19),      S(29, 51),      S(45, 48),      S(-43, 4),      S(-30, -11),    S(-73, -6),     //
    S(19, 77),      S(36, -21),     S(-16, -10),    S(-19, 11),     S(-22, 0),      S(-43, -28),    S(-28, -49),    S(-110, -108),  //
    S(-49, -6),     S(-5, -25),     S(49, -95),     S(33, -29),     S(63, -43),     S(1, -136),     S(-52, -36),    S(-167, -47),   //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-110, 105),   S(-53, 28),     S(-571, 133),   S(-283, 118),   S(-323, 142),   S(-418, 137),   S(-12, 80),     S(-23, 58),     //
    S(10, -29),     S(33, 69),      S(39, 56),      S(80, 0),       S(45, 36),      S(19, 54),      S(33, 33),      S(-61, 53),     //
    S(27, 72),      S(74, 74),      S(294, 32),     S(145, 33),     S(103, 41),     S(44, 80),      S(141, 28),     S(8, 83),       //
    S(29, 25),      S(68, 63),      S(145, 38),     S(144, 57),     S(152, 59),     S(69, 74),      S(71, 45),      S(-34, 67),     //
    S(42, -24),     S(38, 42),      S(55, 43),      S(98, 60),      S(97, 90),      S(27, 80),      S(37, 11),      S(25, -52),     //
    S(62, -26),     S(99, 0),       S(101, 4),      S(22, 59),      S(18, 68),      S(11, 81),      S(72, 12),      S(42, -48),     //
    S(19, -54),     S(99, -27),     S(45, -18),     S(17, 21),      S(7, -6),       S(47, -23),     S(-4, 12),      S(62, -104),    //
    S(43, -1),      S(18, 9),       S(0, 24),       S(15, -37),     S(-2, -32),     S(16, 5),       S(31, -64),     S(-48, 18),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(110, 33),     S(201, 36),     S(95, 81),      S(79, 87),      S(99, 60),      S(61, 62),      S(79, 57),      S(87, 63),      //
    S(121, 72),     S(165, 66),     S(235, 43),     S(150, 98),     S(147, 96),     S(59, 109),     S(24, 109),     S(52, 100),     //
    S(29, 74),      S(295, 10),     S(238, 22),     S(253, 4),      S(155, 39),     S(69, 80),      S(123, 44),     S(-21, 88),     //
    S(4, 56),       S(48, 55),      S(74, 43),      S(121, -6),     S(88, 24),      S(27, 85),      S(10, 73),      S(-76, 74),     //
    S(-119, 6),     S(13, -2),      S(-17, 33),     S(-15, 29),     S(-23, 23),     S(-60, 79),     S(-99, 81),     S(-120, 55),    //
    S(-107, -7),    S(9, -79),      S(-26, -32),    S(-58, -9),     S(-25, -36),    S(-111, 32),    S(-113, 16),    S(-113, 3),     //
    S(-156, 20),    S(-84, -50),    S(-40, -55),    S(-36, -42),    S(-51, -24),    S(-62, -21),    S(-118, -30),   S(-123, -34),   //
    S(-125, 0),     S(-94, 9),      S(-55, -27),    S(-19, -40),    S(-35, -23),    S(-43, -29),    S(-60, -38),    S(-86, -19),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(50, 80),      S(59, 51),      S(85, 73),      S(-89, 226),    S(2, 119),      S(-59, 158),    S(47, 35),      S(-27, 37),     //
    S(87, 62),      S(-95, 258),    S(-63, 314),    S(-156, 333),   S(-105, 258),   S(-150, 273),   S(-66, 140),    S(-5, 33),      //
    S(-41, 187),    S(83, 168),     S(45, 207),     S(-20, 267),    S(-40, 211),    S(-82, 227),    S(6, 97),       S(-12, 17),     //
    S(49, 74),      S(29, 157),     S(16, 169),     S(-15, 242),    S(-24, 217),    S(0, 118),      S(5, 49),       S(-21, 50),     //
    S(29, 86),      S(61, 67),      S(24, 134),     S(-12, 174),    S(-28, 182),    S(-23, 138),    S(-6, 24),      S(-13, -28),    //
    S(61, -139),    S(60, -23),     S(38, 56),      S(-37, 122),    S(6, 42),       S(0, 53),       S(33, -56),     S(-2, -44),     //
    S(58, -252),    S(47, -309),    S(19, -132),    S(42, -44),     S(-6, -5),      S(46, -135),    S(31, -62),     S(-18, -37),    //
    S(-74, -62),    S(-68, -341),   S(-17, -286),   S(17, -209),    S(42, -121),    S(64, -213),    S(32, -158),    S(-18, -55),    //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(488, -700),   S(273, -130),   S(-36, -21),    S(-161, 51),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(359, -163),   S(8, 132),      S(-46, 159),    S(279, 74),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-25, 33),     S(108, 147),    S(169, 115),    S(223, 56),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-231, 57),    S(-11, 128),    S(131, 117),    S(102, 76),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-204, 0),     S(-35, 76),     S(33, 75),      S(-36, 126),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-147, -38),   S(61, -10),     S(-36, 59),     S(-85, 109),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(81, -122),    S(122, -50),    S(7, 22),       S(-110, 84),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-28, -187),   S(76, -143),    S(-53, -100),   S(-25, -127),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
