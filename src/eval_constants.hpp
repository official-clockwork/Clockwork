#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(282, 441);
inline const PParam KNIGHT_MAT = S(965, 1002);
inline const PParam BISHOP_MAT = S(969, 1060);
inline const PParam ROOK_MAT   = S(1478, 1795);
inline const PParam QUEEN_MAT  = S(3220, 3254);
inline const PParam TEMPO_VAL  = S(47, 16);

inline const PParam BISHOP_PAIR_VAL  = S(63, 189);
inline const PParam DOUBLED_PAWN_VAL = S(-48, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(0, 21), S(54, 26), S(84, 65), S(197, 121), S(477, 393), S(1770, 1310),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(48, 47), S(51, 21), S(55, 38), S(103, 118), S(648, -122),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-26, 22), S(-35, 36), S(-27, 75), S(46, 119), S(73, 215), S(26, 29),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(44, -26), S(24, 8), S(-1, 52), S(8, 98), S(96, 188), S(157, 336),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-214, -193), S(-106, -134), S(-51, -38), S(0, -12), S(46, 8), S(67, 53), S(99, 50), S(123, 48), S(175, -35),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-125, -273), S(-74, -180), S(-15, -118), S(-1, -61), S(34, -30), S(46, -6), S(69, 1), S(79, 11), S(86, 21), S(89, 16), S(114, 4), S(173, -52), S(217, -69), S(291, -108),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-204, -346), S(-87, -117), S(-45, -43), S(-25, -47), S(-9, -11), S(4, 3), S(22, 12), S(51, 8), S(77, 17), S(104, 25), S(129, 27), S(139, 34), S(185, 21), S(171, 22), S(272, -72),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(72, 103), S(-648, 606), S(-208, -408), S(-148, -219), S(-108, -265), S(-74, -216), S(-108, -15), S(-85, -47), S(-71, -15), S(-68, 12), S(-59, 32), S(-59, 66), S(-36, 52), S(-24, 51), S(-15, 52), S(-3, 48), S(-18, 73), S(4, 34), S(18, 21), S(51, -32), S(90, -74), S(128, -143), S(217, -211), S(414, -409), S(369, -412), S(963, -720), S(743, -626), S(1334, -992),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(399, 768), S(92, 426), S(21, 476), S(22, 508), S(1, 501), S(-23, 485), S(-6, 491), S(3, 462), S(48, 349),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(87, -39), S(151, -89),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(27, -2), S(137, -42),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(67, -64), S(87, -79), S(139, -80), S(155, -134),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-54, 37), S(-71, 51), S(7, -23), S(174, -116), S(418, -267),
};

inline const PParam PAWN_THREAT_KNIGHT = S(209, 69);
inline const PParam PAWN_THREAT_BISHOP = S(178, 81);
inline const PParam PAWN_THREAT_ROOK   = S(173, 58);
inline const PParam PAWN_THREAT_QUEEN  = S(146, -72);

inline const PParam KNIGHT_THREAT_BISHOP = S(83, 69);
inline const PParam KNIGHT_THREAT_ROOK   = S(224, -11);
inline const PParam KNIGHT_THREAT_QUEEN  = S(133, -74);

inline const PParam BISHOP_THREAT_KNIGHT = S(82, 21);
inline const PParam BISHOP_THREAT_ROOK   = S(209, 40);
inline const PParam BISHOP_THREAT_QUEEN  = S(173, 32);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-116, 484),   S(20, 484),     S(167, 430),    S(317, 212),    S(267, 230),    S(280, 330),    S(154, 370),    S(217, 357),    //
    S(17, -6),      S(183, 10),     S(119, -66),    S(153, -167),   S(76, -167),    S(14, -83),     S(-29, -9),     S(-50, -16),    //
    S(-41, -63),    S(-27, -58),    S(-28, -105),   S(-37, -135),   S(-49, -135),   S(-94, -132),   S(-109, -62),   S(-131, -40),   //
    S(-36, -138),   S(-17, -100),   S(-50, -144),   S(-51, -146),   S(-70, -157),   S(-102, -136),  S(-142, -67),   S(-152, -86),   //
    S(-31, -171),   S(31, -167),    S(-30, -127),   S(-90, -112),   S(-84, -134),   S(-132, -131),  S(-139, -103),  S(-170, -105),  //
    S(-25, -172),   S(127, -171),   S(43, -130),    S(-54, -91),    S(-73, -144),   S(-98, -126),   S(-112, -83),   S(-147, -101),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-404, -160),  S(-80, -85),    S(-557, 307),   S(-62, 62),     S(-336, 153),   S(-358, 170),   S(-413, -16),   S(-533, 42),    //
    S(48, -20),     S(78, 64),      S(197, -57),    S(32, 72),      S(86, 48),      S(40, 1),       S(-39, 20),     S(14, -44),     //
    S(37, 22),      S(-4, 121),     S(214, 59),     S(89, 98),      S(135, 60),     S(30, 67),      S(31, 31),      S(-64, 10),     //
    S(110, 38),     S(37, 94),      S(85, 95),      S(70, 112),     S(80, 78),      S(71, 73),      S(2, 25),       S(13, 42),      //
    S(78, 26),      S(107, 29),     S(81, 66),      S(45, 62),      S(51, 71),      S(51, 73),      S(9, 26),       S(21, -62),     //
    S(0, -29),      S(27, -35),     S(11, -26),     S(34, 41),      S(50, 37),      S(-33, 0),      S(-26, -17),    S(-64, -21),    //
    S(16, 67),      S(44, -23),     S(-10, -20),    S(-14, 6),      S(-21, -8),     S(-44, -35),    S(-23, -60),    S(-115, -120),  //
    S(-46, -13),    S(-4, -29),     S(54, -103),    S(35, -35),     S(67, -51),     S(0, -146),     S(-51, -44),    S(-168, -49),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-102, 106),   S(-40, 28),     S(-548, 133),   S(-279, 126),   S(-306, 142),   S(-417, 146),   S(2, 80),       S(-9, 61),      //
    S(17, -33),     S(5, 80),       S(28, 64),      S(30, 25),      S(21, 45),      S(11, 60),      S(1, 48),       S(-54, 53),     //
    S(22, 80),      S(71, 80),      S(272, 44),     S(131, 44),     S(82, 56),      S(26, 94),      S(141, 30),     S(13, 87),      //
    S(32, 23),      S(36, 78),      S(132, 48),     S(128, 67),     S(137, 69),     S(58, 84),      S(45, 59),      S(-33, 70),     //
    S(32, -11),     S(46, 47),      S(66, 43),      S(86, 68),      S(86, 98),      S(34, 76),      S(35, 21),      S(25, -42),     //
    S(69, -18),     S(118, 2),      S(115, 5),      S(42, 61),      S(33, 70),      S(22, 78),      S(88, 7),       S(44, -41),     //
    S(37, -52),     S(116, -26),    S(62, -15),     S(40, 21),      S(31, -6),      S(61, -19),     S(9, 13),       S(72, -106),    //
    S(55, 3),       S(30, 11),      S(23, 24),      S(31, -36),     S(13, -29),     S(37, 5),       S(46, -64),     S(-30, 22),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(124, 22),     S(222, 25),     S(118, 70),     S(88, 86),      S(111, 60),     S(68, 59),      S(91, 57),      S(102, 55),     //
    S(129, 65),     S(179, 59),     S(252, 36),     S(162, 93),     S(158, 92),     S(72, 111),     S(35, 107),     S(55, 98),      //
    S(43, 75),      S(301, 8),      S(256, 20),     S(263, 7),      S(168, 41),     S(80, 79),      S(129, 49),     S(-16, 95),     //
    S(10, 62),      S(53, 59),      S(90, 49),      S(138, -6),     S(104, 23),     S(40, 85),      S(20, 75),      S(-74, 79),     //
    S(-110, 15),    S(25, 4),       S(-5, 34),      S(-2, 29),      S(-8, 24),      S(-45, 82),     S(-91, 81),     S(-113, 63),    //
    S(-97, -2),     S(18, -78),     S(-13, -27),    S(-46, -8),     S(-12, -32),    S(-102, 33),    S(-106, 17),    S(-112, 3),     //
    S(-154, 22),    S(-75, -46),    S(-33, -51),    S(-27, -37),    S(-43, -21),    S(-53, -18),    S(-106, -32),   S(-116, -32),   //
    S(-125, 5),     S(-90, 16),     S(-51, -21),    S(-16, -37),    S(-28, -19),    S(-37, -23),    S(-55, -37),    S(-86, -16),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(45, 90),      S(79, 34),      S(101, 60),     S(-75, 218),    S(7, 114),      S(-61, 166),    S(47, 41),      S(-21, 38),     //
    S(89, 71),      S(-83, 237),    S(-43, 296),    S(-145, 326),   S(-94, 241),    S(-142, 266),   S(-65, 133),    S(-9, 39),      //
    S(-34, 184),    S(96, 152),     S(54, 204),     S(-10, 255),    S(-31, 204),    S(-75, 219),    S(14, 90),      S(-11, 22),     //
    S(52, 73),      S(33, 154),     S(25, 164),     S(1, 234),      S(-5, 210),     S(6, 113),      S(8, 49),       S(-21, 56),     //
    S(28, 98),      S(59, 72),      S(30, 136),     S(0, 172),      S(-20, 185),    S(-18, 138),    S(-8, 30),      S(-12, -19),    //
    S(64, -128),    S(60, -14),     S(46, 59),      S(-32, 123),    S(12, 45),      S(4, 49),       S(30, -54),     S(-2, -41),     //
    S(53, -239),    S(44, -293),    S(22, -120),    S(44, -38),     S(-1, 2),       S(45, -123),    S(30, -55),     S(-16, -29),    //
    S(-89, -20),    S(-77, -322),   S(-14, -286),   S(15, -200),    S(40, -109),    S(63, -203),    S(37, -149),    S(-20, -49),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(422, -722),   S(267, -162),   S(-58, -18),    S(-156, 48),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(373, -180),   S(41, 99),      S(-39, 149),    S(284, 67),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-6, 37),      S(124, 135),    S(172, 113),    S(232, 55),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-222, 74),    S(2, 130),      S(140, 122),    S(100, 87),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-199, 19),    S(-27, 85),     S(45, 88),      S(-31, 135),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-142, -18),   S(72, 4),       S(-24, 71),     S(-76, 117),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(86, -104),    S(127, -36),    S(13, 33),      S(-100, 93),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-26, -165),   S(77, -127),    S(-51, -81),    S(-20, -110),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
