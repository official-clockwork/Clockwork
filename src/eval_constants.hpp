#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(281, 527);
inline const PScore KNIGHT_MAT = S(836, 1005);
inline const PScore BISHOP_MAT = S(868, 1100);
inline const PScore ROOK_MAT   = S(1272, 1798);
inline const PScore QUEEN_MAT  = S(2777, 3274);
inline const PScore TEMPO_VAL  = S(29, 14);

inline const PScore BISHOP_PAIR_VAL  = S(59, 204);
inline const PScore DOUBLED_PAWN_VAL = S(-78, -119);

inline const PScore POTENTIAL_CHECKER_VAL = S(-73, -2);

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-235, -236), S(-139, -144), S(-91, -44), S(-44, -6), S(0, 13), S(21, 63), S(51, 68), S(84, 63), S(131, -10),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-189, -275), S(-128, -185), S(-72, -139), S(-53, -78), S(-13, -41), S(3, -16), S(30, -12), S(39, -2), S(46, 16), S(46, 8), S(61, 7), S(163, -65), S(179, -102), S(271, -158),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-264, -389), S(-98, -97), S(-58, -35), S(-43, -23), S(-25, -2), S(-13, 5), S(5, 23), S(36, 13), S(65, 16), S(87, 33), S(115, 24), S(126, 32), S(173, 19), S(132, 36), S(244, -71),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(-106, 14), S(-356, -32), S(-187, -454), S(-185, -103), S(-110, -342), S(-108, -232), S(-134, -32), S(-104, -60), S(-93, -38), S(-84, -7), S(-87, 35), S(-80, 61), S(-52, 45), S(-45, 49), S(-27, 36), S(-31, 57), S(-41, 86), S(-28, 59), S(-12, 28), S(21, -15), S(69, -75), S(132, -150), S(134, -143), S(418, -452), S(343, -436), S(982, -742), S(598, -495), S(1421, -1085),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(356, 684), S(99, 436), S(13, 484), S(18, 509), S(-2, 499), S(-16, 474), S(-27, 487), S(-18, 463), S(79, 336),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(88, -49), S(151, -96),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(30, -8), S(129, -44),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(69, -61), S(106, -90), S(157, -89), S(208, -141),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-58, 54), S(-58, 41), S(16, -25), S(195, -120), S(347, -221),
};

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(-159, 457),   S(40, 418),     S(110, 441),    S(300, 189),    S(231, 216),    S(252, 333),    S(123, 346),    S(191, 331),    //
    S(-49, 108),    S(135, 163),    S(94, 60),      S(189, -3),     S(122, -11),    S(29, 46),      S(-33, 100),    S(-84, 47),     //
    S(-73, -61),    S(-46, -47),    S(-35, -101),   S(-36, -136),   S(-37, -121),   S(-89, -123),   S(-113, -57),   S(-156, -36),   //
    S(-60, -164),   S(-15, -123),   S(-47, -172),   S(-54, -165),   S(-64, -179),   S(-100, -166),  S(-135, -90),   S(-177, -104),  //
    S(-22, -199),   S(60, -186),    S(-11, -163),   S(-74, -135),   S(-74, -154),   S(-129, -151),  S(-122, -113),  S(-175, -127),  //
    S(-63, -200),   S(108, -201),   S(15, -165),    S(-77, -110),   S(-97, -155),   S(-128, -145),  S(-133, -98),   S(-179, -120),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-296, -157),  S(-5, -110),    S(-519, 264),   S(-17, 77),     S(-228, 136),   S(-311, 181),   S(-232, -70),   S(-388, 16),    //
    S(87, -66),     S(62, 88),      S(211, -35),    S(27, 58),      S(92, 85),      S(136, -50),    S(-2, -11),     S(62, -66),     //
    S(-11, 75),     S(12, 138),     S(186, 93),     S(138, 73),     S(125, 84),     S(28, 69),      S(18, 74),      S(-77, 50),     //
    S(96, 35),      S(3, 108),      S(53, 115),     S(36, 120),     S(51, 106),     S(52, 74),      S(-25, 44),     S(-5, 67),      //
    S(62, 38),      S(72, 52),      S(62, 52),      S(17, 70),      S(19, 75),      S(27, 72),      S(-25, 67),     S(2, -35),      //
    S(-29, 5),      S(4, -25),      S(-12, -37),    S(14, 37),      S(25, 33),      S(-71, 3),      S(-51, -14),    S(-86, -16),    //
    S(35, 26),      S(10, 12),      S(-52, 2),      S(-32, 19),     S(-36, -5),     S(-75, -16),    S(-51, -37),    S(-100, -114),  //
    S(-104, 51),    S(-7, -40),     S(18, -75),     S(37, -40),     S(42, -44),     S(-28, -127),   S(-62, -20),    S(-213, 6),     //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-144, 62),    S(-29, 0),      S(-554, 111),   S(-307, 105),   S(-320, 125),   S(-489, 125),   S(-54, 92),     S(14, 57),      //
    S(-33, -21),    S(-25, 81),     S(30, 36),      S(32, -13),     S(-5, 45),      S(1, 43),       S(19, 25),      S(-87, 24),     //
    S(-11, 69),     S(11, 75),      S(235, 39),     S(103, 33),     S(69, 44),      S(4, 74),       S(117, 2),      S(8, 45),       //
    S(17, -11),     S(18, 45),      S(79, 31),      S(89, 65),      S(117, 41),     S(35, 54),      S(19, 46),      S(-74, 79),     //
    S(37, -52),     S(10, 23),      S(35, 13),      S(51, 52),      S(44, 82),      S(-1, 48),      S(-5, 2),       S(-13, -49),    //
    S(49, -12),     S(84, -27),     S(82, -21),     S(1, 46),       S(-5, 53),      S(-20, 68),     S(51, -21),     S(24, -49),     //
    S(-5, -49),     S(87, -47),     S(20, -22),     S(-2, 6),       S(-14, -11),    S(25, -22),     S(-14, -7),     S(34, -112),    //
    S(-3, 45),      S(-17, 14),     S(-21, 32),     S(-5, -45),     S(-29, -39),    S(4, -6),       S(21, -79),     S(-59, 26),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(77, 20),      S(299, -3),     S(18, 85),      S(72, 62),      S(80, 55),      S(28, 67),      S(80, 44),      S(66, 59),      //
    S(131, 36),     S(132, 61),     S(229, 33),     S(104, 105),    S(128, 87),     S(33, 115),     S(-15, 118),    S(19, 105),     //
    S(-20, 80),     S(265, -4),     S(184, 30),     S(183, 25),     S(114, 32),     S(25, 98),      S(61, 65),      S(-45, 86),     //
    S(-32, 68),     S(-12, 63),     S(42, 51),      S(102, -6),     S(61, 13),      S(5, 98),       S(-10, 64),     S(-105, 86),    //
    S(-109, -23),   S(23, -38),     S(-60, 41),     S(-38, 21),     S(-61, 27),     S(-87, 75),     S(-129, 62),    S(-135, 55),    //
    S(-103, -49),   S(6, -116),     S(-59, -29),    S(-79, -17),    S(-50, -42),    S(-131, 30),    S(-145, 17),    S(-158, 13),    //
    S(-151, 11),    S(-87, -82),    S(-63, -57),    S(-49, -48),    S(-55, -39),    S(-79, -21),    S(-135, -36),   S(-147, -46),   //
    S(-124, -18),   S(-95, 0),      S(-64, -32),    S(-38, -43),    S(-53, -18),    S(-60, -25),    S(-79, -38),    S(-100, -27),   //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(19, 54),      S(51, 1),       S(-23, 166),    S(-37, 149),    S(-1, 97),      S(-81, 189),    S(46, 22),      S(-62, 37),     //
    S(62, 107),     S(-158, 287),   S(-63, 298),    S(-255, 424),   S(-162, 292),   S(-179, 289),   S(-96, 127),    S(-32, 72),     //
    S(-84, 218),    S(24, 192),     S(19, 227),     S(-18, 236),    S(-110, 273),   S(-100, 222),   S(-22, 87),     S(-36, 46),     //
    S(36, 38),      S(10, 151),     S(-20, 143),    S(-58, 251),    S(-47, 221),    S(3, 69),       S(-13, 43),     S(-35, 43),     //
    S(19, 55),      S(61, 26),      S(-6, 159),     S(-28, 150),    S(-63, 183),    S(-38, 113),    S(5, -43),      S(-23, -43),    //
    S(70, -146),    S(39, -16),     S(32, 32),      S(-46, 87),     S(-6, 14),      S(1, -9),       S(16, -60),     S(-15, -15),    //
    S(37, -218),    S(45, -306),    S(17, -151),    S(45, -72),     S(-1, -33),     S(33, -143),    S(27, -120),    S(-27, -26),    //
    S(-73, -56),    S(-24, -401),   S(-13, -274),   S(16, -237),    S(44, -145),    S(44, -192),    S(3, -128),     S(-63, -3),     //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(513, -604),   S(406, -181),   S(-482, 159),   S(-488, 153),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(280, -97),    S(-155, 192),   S(-105, 219),   S(17, 189),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-162, 75),    S(43, 144),     S(121, 127),    S(18, 106),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-244, 61),    S(-99, 160),    S(97, 112),     S(13, 95),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-224, -7),    S(-80, 82),     S(33, 69),      S(-103, 129),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-150, -55),   S(62, -20),     S(-28, 41),     S(-90, 101),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(85, -135),    S(144, -68),    S(35, 1),       S(-81, 69),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(5, -218),     S(95, -161),    S(-31, -106),   S(-1, -136),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
