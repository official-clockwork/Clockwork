#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(283, 446);
inline const PScore KNIGHT_MAT = S(958, 1003);
inline const PScore BISHOP_MAT = S(975, 1068);
inline const PScore ROOK_MAT   = S(1460, 1808);
inline const PScore QUEEN_MAT  = S(3199, 3277);
inline const PScore TEMPO_VAL  = S(42, 18);

inline const PScore BISHOP_PAIR_VAL  = S(73, 193);
inline const PScore DOUBLED_PAWN_VAL = S(-49, -76);

inline const PScore POTENTIAL_CHECKER_VAL = S(-74, -3);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(2, 21), S(52, 27), S(83, 72), S(188, 143), S(475, 572), S(1767, 1459),
};
inline const std::array<PScore, 5> DEFENDED_PAWN = {
    S(47, 46), S(50, 21), S(57, 37), S(107, 114), S(660, -135),
};
inline const std::array<PScore, 6> PASSED_PAWN = {
    S(-1, 3), S(-27, 37), S(-29, 88), S(44, 139), S(72, 246), S(20, 41),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-220, -192), S(-114, -132), S(-59, -34), S(-9, -7), S(38, 15), S(59, 59), S(91, 57), S(116, 55), S(167, -26),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-129, -275), S(-77, -181), S(-18, -119), S(-4, -60), S(33, -31), S(46, -8), S(70, 1), S(75, 12), S(83, 25), S(81, 21), S(103, 10), S(159, -43), S(194, -57), S(262, -91),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-220, -339), S(-87, -117), S(-43, -43), S(-22, -43), S(-9, -12), S(5, 4), S(23, 12), S(54, 9), S(79, 17), S(105, 25), S(129, 25), S(143, 31), S(189, 15), S(173, 20), S(273, -73),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(68, 102), S(-633, 546), S(-215, -399), S(-155, -214), S(-114, -263), S(-81, -215), S(-117, -17), S(-91, -40), S(-79, -10), S(-79, 13), S(-70, 35), S(-65, 72), S(-44, 56), S(-30, 55), S(-23, 54), S(-9, 52), S(-27, 73), S(-1, 35), S(15, 24), S(46, -29), S(88, -78), S(119, -134), S(216, -214), S(413, -411), S(376, -422), S(949, -706), S(737, -629), S(1379, -1012),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(385, 805), S(87, 437), S(19, 484), S(17, 514), S(-1, 506), S(-26, 484), S(-8, 495), S(0, 463), S(50, 339),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(86, -39), S(155, -91),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(20, 1), S(126, -39),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(67, -66), S(89, -81), S(138, -80), S(155, -129),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-52, 36), S(-66, 49), S(10, -28), S(181, -125), S(413, -272),
};

inline const PScore PAWN_THREAT_KNIGHT = S(193, 70);
inline const PScore PAWN_THREAT_BISHOP = S(186, 76);
inline const PScore PAWN_THREAT_ROOK = S(167, 47);
inline const PScore PAWN_THREAT_QUEEN = S(132, -71);

inline const PScore KNIGHT_THREAT_BISHOP = S(88, 71);
inline const PScore KNIGHT_THREAT_ROOK = S(221, -13);
inline const PScore KNIGHT_THREAT_QUEEN = S(124, -66);

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(-115, 486),   S(18, 492),     S(162, 439),    S(316, 217),    S(267, 236),    S(281, 328),    S(156, 369),    S(221, 353),    //
    S(12, -7),      S(173, 13),     S(112, -66),    S(147, -175),   S(71, -176),    S(14, -91),     S(-31, -9),     S(-54, -21),    //
    S(-46, -70),    S(-31, -61),    S(-29, -108),   S(-40, -141),   S(-52, -141),   S(-97, -137),   S(-112, -65),   S(-132, -46),   //
    S(-39, -143),   S(-19, -104),   S(-55, -152),   S(-53, -149),   S(-74, -161),   S(-105, -141),  S(-145, -69),   S(-156, -91),   //
    S(-34, -178),   S(27, -176),    S(-33, -134),   S(-94, -121),   S(-87, -141),   S(-139, -135),  S(-143, -108),  S(-173, -111),  //
    S(-27, -182),   S(126, -177),   S(41, -136),    S(-58, -97),    S(-76, -152),   S(-100, -129),  S(-114, -86),   S(-150, -104),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-396, -152),  S(-79, -71),    S(-559, 315),   S(-40, 59),     S(-339, 159),   S(-357, 180),   S(-410, -13),   S(-529, 53),    //
    S(54, -19),     S(86, 69),      S(201, -50),    S(30, 75),      S(84, 56),      S(49, 5),       S(-30, 25),     S(22, -40),     //
    S(32, 28),      S(0, 127),      S(204, 67),     S(82, 103),     S(132, 67),     S(26, 72),      S(36, 37),      S(-64, 17),     //
    S(116, 44),     S(36, 100),     S(80, 105),     S(55, 123),     S(70, 84),      S(62, 80),      S(0, 30),       S(14, 47),      //
    S(87, 31),      S(101, 33),     S(75, 73),      S(36, 68),      S(38, 77),      S(46, 82),      S(6, 32),       S(28, -54),     //
    S(-6, -21),     S(27, -35),     S(13, -23),     S(31, 44),      S(48, 40),      S(-34, 0),      S(-25, -15),    S(-69, -17),    //
    S(19, 69),      S(45, -21),     S(-4, -13),     S(-10, 9),      S(-20, -7),     S(-39, -33),    S(-24, -53),    S(-110, -115),  //
    S(-43, -11),    S(4, -27),      S(59, -96),     S(41, -31),     S(72, -47),     S(5, -140),     S(-44, -45),    S(-161, -50),   //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-119, 107),   S(-53, 29),     S(-561, 134),   S(-276, 121),   S(-306, 139),   S(-414, 145),   S(-10, 81),     S(-23, 60),     //
    S(6, -32),      S(30, 73),      S(41, 57),      S(83, 5),       S(45, 36),      S(24, 58),      S(29, 35),      S(-63, 50),     //
    S(27, 73),      S(81, 74),      S(302, 36),     S(155, 38),     S(105, 45),     S(50, 83),      S(146, 25),     S(10, 85),      //
    S(30, 19),      S(67, 62),      S(151, 41),     S(152, 57),     S(163, 56),     S(72, 75),      S(68, 46),      S(-32, 67),     //
    S(42, -22),     S(46, 46),      S(59, 46),      S(101, 57),     S(99, 91),      S(28, 80),      S(42, 16),      S(33, -43),     //
    S(65, -21),     S(105, 3),      S(106, 7),      S(27, 63),      S(22, 73),      S(14, 79),      S(75, 11),      S(40, -46),     //
    S(19, -49),     S(102, -24),    S(45, -16),     S(18, 23),      S(12, -4),      S(47, -18),     S(-6, 15),      S(57, -105),    //
    S(42, -1),      S(15, 11),      S(0, 25),       S(13, -34),     S(-4, -30),     S(14, 6),       S(32, -58),     S(-48, 22),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(113, 31),     S(200, 33),     S(93, 75),      S(80, 86),      S(106, 58),     S(61, 57),      S(84, 58),      S(88, 59),      //
    S(126, 66),     S(167, 61),     S(242, 43),     S(152, 97),     S(151, 89),     S(70, 108),     S(28, 108),     S(51, 98),      //
    S(35, 75),      S(294, 6),      S(245, 20),     S(258, 3),      S(162, 38),     S(77, 76),      S(128, 47),     S(-16, 88),     //
    S(10, 54),      S(51, 55),      S(83, 44),      S(128, -8),     S(96, 19),      S(33, 81),      S(13, 70),      S(-74, 71),     //
    S(-110, 10),    S(19, -6),      S(-13, 28),     S(-11, 27),     S(-14, 22),     S(-55, 75),     S(-96, 76),     S(-118, 53),    //
    S(-100, -5),    S(10, -84),     S(-22, -31),    S(-53, -12),    S(-20, -38),    S(-108, 31),    S(-112, 11),    S(-116, 2),     //
    S(-155, 18),    S(-81, -51),    S(-36, -54),    S(-32, -41),    S(-49, -26),    S(-58, -22),    S(-114, -33),   S(-120, -36),   //
    S(-124, -1),    S(-92, 10),     S(-54, -28),    S(-17, -41),    S(-31, -22),    S(-40, -26),    S(-57, -38),    S(-88, -22),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(45, 81),      S(57, 54),      S(87, 69),      S(-87, 225),    S(-4, 119),     S(-62, 161),    S(45, 44),      S(-26, 39),     //
    S(89, 62),      S(-91, 258),    S(-58, 315),    S(-152, 338),   S(-104, 256),   S(-150, 277),   S(-71, 139),    S(-11, 31),     //
    S(-38, 187),    S(81, 163),     S(47, 211),     S(-20, 263),    S(-41, 213),    S(-82, 225),    S(8, 95),       S(-12, 21),     //
    S(49, 71),      S(27, 153),     S(18, 169),     S(-11, 244),    S(-16, 220),    S(1, 117),      S(6, 48),       S(-23, 52),     //
    S(27, 90),      S(58, 67),      S(22, 138),     S(-7, 175),     S(-28, 185),    S(-24, 139),    S(-13, 23),     S(-14, -29),    //
    S(63, -138),    S(58, -22),     S(41, 56),      S(-39, 119),    S(8, 44),       S(0, 48),       S(28, -56),     S(-2, -42),     //
    S(54, -248),    S(43, -305),    S(21, -127),    S(41, -47),     S(-3, -3),      S(49, -129),    S(28, -61),     S(-16, -33),    //
    S(-76, -61),    S(-70, -341),   S(-19, -289),   S(15, -212),    S(38, -119),    S(64, -210),    S(37, -156),    S(-20, -55),    //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(488, -699),   S(275, -132),   S(-36, -17),    S(-156, 51),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(363, -164),   S(13, 134),     S(-42, 161),    S(284, 75),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-23, 37),     S(107, 149),    S(170, 113),    S(222, 54),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-225, 62),    S(-12, 125),    S(132, 114),    S(105, 77),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-203, 1),     S(-34, 76),     S(35, 76),      S(-35, 126),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-147, -38),   S(64, -9),      S(-36, 58),     S(-86, 107),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(81, -121),    S(121, -49),    S(6, 22),       S(-110, 85),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-28, -187),   S(75, -143),    S(-54, -95),    S(-24, -122),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
