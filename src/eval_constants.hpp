#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(291, 387);
inline const PParam KNIGHT_MAT = S(1101, 965);
inline const PParam BISHOP_MAT = S(1103, 1033);
inline const PParam ROOK_MAT   = S(1627, 1703);
inline const PParam QUEEN_MAT  = S(3657, 3020);
inline const PParam TEMPO_VAL  = S(58, 15);

inline const PParam BISHOP_PAIR_VAL  = S(80, 177);
inline const PParam DOUBLED_PAWN_VAL = S(-36, -77);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(17, 20), S(58, 32), S(78, 70), S(201, 138), S(561, 251), S(943, 1147),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(63, 45), S(57, 31), S(64, 56), S(147, 120), S(698, -84),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-50, 16), S(-40, 33), S(-9, 105), S(58, 182), S(95, 318), S(258, 113),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(44, -41), S(30, -2), S(13, 28), S(21, 71), S(97, 143), S(174, 275),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(14, -42), S(-2, 6), S(-23, -17), S(-22, -41), S(-38, -86), S(-234, -138),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(16, 37), S(-27, 41), S(-19, -11), S(-6, -41), S(4, -38), S(34, -41), S(12, -53),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-192, -111), S(16, -64), S(-22, -22), S(-1, 9), S(4, 33), S(26, 32), S(-22, 50),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-221, -291), S(-111, -130), S(-52, -73), S(-7, -39), S(41, -24), S(69, 17), S(108, 11), S(142, 6), S(194, -64),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-131, -368), S(-57, -174), S(23, -115), S(52, -71), S(81, -38), S(101, -20), S(116, -11), S(133, -8), S(144, -3), S(151, -15), S(174, -34), S(229, -86), S(245, -97), S(309, -143),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-212, -382), S(-111, -127), S(-57, -65), S(-20, -55), S(10, -30), S(30, -11), S(53, -1), S(83, -2), S(109, 4), S(138, 13), S(166, 12), S(183, 16), S(219, 10), S(239, -7), S(384, -137),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-405, 67), S(-272, -774), S(-176, -631), S(-125, -422), S(-100, -234), S(-67, -152), S(-66, -28), S(-42, -22), S(-32, 14), S(-21, 34), S(-14, 60), S(-9, 80), S(6, 77), S(16, 82), S(21, 85), S(38, 72), S(36, 78), S(49, 59), S(69, 26), S(97, -10), S(124, -47), S(160, -111), S(207, -148), S(336, -293), S(342, -317), S(694, -526), S(580, -498), S(1189, -821),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(523, 530), S(179, 398), S(77, 483), S(62, 518), S(39, 513), S(3, 512), S(25, 508), S(18, 489), S(18, 424),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(81, -30), S(152, -76),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(36, -3), S(140, -42),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -43), S(71, -70), S(112, -70), S(160, -135),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-41, 32), S(-59, 43), S(-5, -3), S(158, -93), S(357, -241),
};

inline const PParam PAWN_THREAT_KNIGHT = S(232, 70);
inline const PParam PAWN_THREAT_BISHOP = S(211, 116);
inline const PParam PAWN_THREAT_ROOK   = S(194, 55);
inline const PParam PAWN_THREAT_QUEEN  = S(172, -61);

inline const PParam KNIGHT_THREAT_BISHOP = S(103, 69);
inline const PParam KNIGHT_THREAT_ROOK   = S(244, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(152, -67);

inline const PParam BISHOP_THREAT_KNIGHT = S(106, 24);
inline const PParam BISHOP_THREAT_ROOK   = S(241, 49);
inline const PParam BISHOP_THREAT_QUEEN  = S(190, 44);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-5, -12), S(-8, -4), S(-7, -13), S(-12, -23), S(-18, -27), S(-22, -34), S(-22, -41), S(-28, -40), S(-38, -49),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(182, 394),    S(186, 445),    S(249, 410),    S(298, 297),    S(245, 290),    S(233, 355),    S(132, 377),    S(185, 349),    //
    S(65, -27),     S(190, 0),      S(161, -56),    S(160, -111),   S(116, -130),   S(59, -79),     S(23, -33),     S(-38, -30),    //
    S(-3, -60),     S(22, -55),     S(38, -99),     S(24, -113),    S(9, -119),     S(-31, -111),   S(-74, -63),    S(-108, -41),   //
    S(-12, -114),   S(10, -86),     S(7, -118),     S(0, -117),     S(-23, -127),   S(-54, -113),   S(-110, -62),   S(-133, -77),   //
    S(-29, -141),   S(38, -139),    S(-9, -96),     S(-39, -91),    S(-56, -100),   S(-97, -102),   S(-118, -86),   S(-150, -93),   //
    S(-18, -138),   S(112, -134),   S(68, -99),     S(10, -79),     S(-24, -92),    S(-60, -94),    S(-88, -69),    S(-127, -83),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-368, -143),  S(-324, 73),    S(-435, 248),   S(-98, 77),     S(-235, 107),   S(-321, 113),   S(-546, 101),   S(-512, -1),    //
    S(21, 14),      S(91, 22),      S(190, -47),    S(139, 16),     S(140, 22),     S(75, 0),       S(16, 24),      S(-3, -19),     //
    S(84, -7),      S(130, 42),     S(217, 35),     S(172, 55),     S(172, 45),     S(87, 54),      S(82, 23),      S(-14, 28),     //
    S(124, 32),     S(97, 63),      S(133, 71),     S(116, 96),     S(127, 82),     S(92, 76),      S(61, 29),      S(52, 28),      //
    S(117, 17),     S(138, 13),     S(126, 44),     S(108, 54),     S(98, 65),      S(88, 63),      S(66, 27),      S(59, -28),     //
    S(26, -6),      S(50, -21),     S(51, -4),      S(61, 41),      S(68, 38),      S(12, 15),      S(14, -22),     S(-18, -27),    //
    S(32, 8),       S(57, -18),     S(35, -14),     S(37, 3),       S(24, -3),      S(-3, -25),     S(15, -37),     S(-44, -109),   //
    S(-13, -44),    S(29, -4),      S(44, -30),     S(57, -24),     S(51, -17),     S(4, -49),      S(-9, -20),     S(-68, -67),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-132, 88),    S(-157, 72),    S(-399, 97),    S(-280, 111),   S(-227, 115),   S(-396, 140),   S(-143, 118),   S(-88, 90),     //
    S(35, -20),     S(25, 61),      S(41, 42),      S(26, 43),      S(2, 58),       S(39, 49),      S(15, 42),      S(-29, 40),     //
    S(67, 38),      S(128, 45),     S(219, 52),     S(146, 49),     S(125, 50),     S(95, 65),      S(147, 35),     S(29, 41),      //
    S(69, 1),       S(76, 61),      S(134, 57),     S(142, 82),     S(152, 81),     S(84, 78),      S(54, 61),      S(6, 39),       //
    S(75, -29),     S(95, 21),      S(102, 46),     S(111, 69),     S(105, 86),     S(52, 78),      S(40, 34),      S(26, -25),     //
    S(92, -27),     S(133, -1),     S(141, 12),     S(82, 54),      S(65, 58),      S(63, 55),      S(92, 10),      S(57, -25),     //
    S(75, -66),     S(127, -37),    S(99, -25),     S(73, 4),       S(61, -8),      S(64, -21),     S(44, -10),     S(64, -76),     //
    S(73, -49),     S(64, -4),      S(71, 4),       S(86, -31),     S(96, -42),     S(91, -2),      S(78, -29),     S(52, -27),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(161, 40),     S(212, 43),     S(140, 74),     S(151, 66),     S(160, 55),     S(113, 67),     S(125, 68),     S(137, 71),     //
    S(83, 92),      S(161, 69),     S(237, 45),     S(175, 85),     S(192, 74),     S(139, 82),     S(80, 100),     S(67, 109),     //
    S(72, 70),      S(215, 30),     S(250, 22),     S(268, 11),     S(221, 22),     S(142, 64),     S(159, 52),     S(35, 105),     //
    S(22, 66),      S(88, 58),      S(125, 50),     S(168, 6),      S(136, 31),     S(72, 78),      S(46, 81),      S(-22, 91),     //
    S(-46, 23),     S(35, 25),      S(26, 40),      S(26, 37),      S(21, 32),      S(-3, 75),      S(-34, 72),     S(-58, 64),     //
    S(-80, 5),      S(-6, -22),     S(-6, 4),       S(-19, 5),      S(0, -14),      S(-50, 37),     S(-56, 22),     S(-83, 22),     //
    S(-137, 15),    S(-36, -44),    S(-14, -27),    S(0, -30),      S(-4, -26),     S(-23, -11),    S(-47, -31),    S(-87, -11),    //
    S(-106, 13),    S(-73, 22),     S(-21, -14),    S(15, -33),     S(6, -20),      S(-7, -10),     S(-29, -15),    S(-58, 1),      //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(43, 77),      S(79, 44),      S(79, 55),      S(-42, 187),    S(31, 101),     S(-27, 131),    S(45, 41),      S(-12, 60),     //
    S(31, 119),     S(-40, 211),    S(-42, 262),    S(-131, 295),   S(-102, 240),   S(-113, 239),   S(-65, 146),    S(-29, 87),     //
    S(-7, 146),     S(81, 144),     S(20, 221),     S(2, 229),      S(-35, 209),    S(-69, 211),    S(3, 106),      S(-32, 81),     //
    S(36, 81),      S(32, 156),     S(2, 181),      S(-6, 242),     S(-25, 222),    S(-34, 161),    S(-2, 77),      S(-5, 35),      //
    S(10, 101),     S(42, 62),      S(19, 128),     S(-6, 170),     S(-20, 158),    S(-22, 124),    S(-11, 50),     S(-6, 0),       //
    S(27, -71),     S(43, -17),     S(49, 43),      S(-5, 74),      S(9, 26),       S(12, 31),      S(21, -34),     S(0, -29),      //
    S(14, -177),    S(44, -278),    S(34, -141),    S(50, -69),     S(23, -48),     S(42, -121),    S(16, -58),     S(2, -59),      //
    S(-36, -107),   S(27, -359),    S(22, -344),    S(57, -256),    S(59, -170),    S(62, -216),    S(43, -176),    S(-15, -92),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-116, -391),  S(112, -22),    S(-44, 26),     S(-147, 50),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(214, -116),   S(36, 159),     S(46, 149),     S(149, 80),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-15, 54),     S(98, 145),     S(134, 116),    S(114, 74),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-238, 76),    S(52, 102),     S(41, 103),     S(-16, 89),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-212, 35),    S(-26, 74),     S(-12, 81),     S(-94, 118),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-121, 4),     S(71, 19),      S(-17, 71),     S(-62, 99),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(103, -85),    S(154, -24),    S(65, 23),      S(-17, 69),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-17, -123),   S(119, -105),   S(21, -68),     S(6, -68),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// Epoch duration: 38.9337s
// Loss: 0.00246796
// clang-format on
}
