#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(280, 525);
inline const PScore KNIGHT_MAT = S(839, 1004);
inline const PScore BISHOP_MAT = S(869, 1103);
inline const PScore ROOK_MAT   = S(1272, 1804);
inline const PScore QUEEN_MAT  = S(2773, 3287);
inline const PScore TEMPO_VAL  = S(29, 15);

inline const PScore BISHOP_PAIR_VAL  = S(59, 204);
inline const PScore DOUBLED_PAWN_VAL = S(-78, -121);

inline const PScore POTENTIAL_CHECKER_VAL = S(-74, -2);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(-1, -15), S(11, 6), S(75, 53), S(198, 118), S(343, 695), S(1082, 1277),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-238, -227), S(-141, -138), S(-93, -39), S(-48, -2), S(-2, 16), S(19, 65), S(48, 70), S(80, 65), S(126, -8),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-194, -271), S(-131, -184), S(-76, -138), S(-55, -76), S(-15, -38), S(3, -15), S(29, -11), S(39, -2), S(46, 17), S(44, 8), S(61, 7), S(160, -65), S(177, -98), S(265, -157),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-270, -392), S(-98, -100), S(-59, -35), S(-44, -25), S(-25, -4), S(-14, 4), S(4, 21), S(34, 12), S(63, 16), S(85, 32), S(113, 22), S(125, 31), S(173, 18), S(132, 35), S(245, -72),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(-66, 34), S(-447, 125), S(-194, -455), S(-176, -127), S(-106, -353), S(-104, -240), S(-132, -37), S(-104, -59), S(-94, -38), S(-84, -7), S(-89, 38), S(-82, 66), S(-54, 50), S(-45, 52), S(-26, 37), S(-30, 59), S(-39, 86), S(-26, 58), S(-7, 25), S(23, -14), S(73, -76), S(135, -151), S(140, -148), S(421, -455), S(346, -439), S(995, -751), S(660, -536), S(1577, -1174),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(334, 706), S(99, 446), S(12, 494), S(18, 511), S(-1, 497), S(-16, 474), S(-20, 485), S(-10, 463), S(83, 336),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(87, -49), S(152, -97),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(29, -6), S(127, -43),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(72, -61), S(106, -89), S(156, -87), S(208, -140),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-58, 54), S(-59, 44), S(15, -21), S(192, -116), S(338, -213),
};

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(-150, 452),   S(43, 414),     S(108, 443),    S(294, 191),    S(233, 213),    S(254, 331),    S(128, 338),    S(188, 334),    //
    S(-43, 103),    S(143, 144),    S(100, 51),     S(191, -13),    S(124, -19),    S(32, 41),      S(-36, 103),    S(-83, 49),     //
    S(-73, -62),    S(-50, -53),    S(-42, -107),   S(-39, -140),   S(-40, -125),   S(-97, -123),   S(-119, -60),   S(-158, -35),   //
    S(-62, -169),   S(-25, -131),   S(-60, -176),   S(-70, -166),   S(-80, -177),   S(-119, -164),  S(-147, -94),   S(-182, -106),  //
    S(-21, -200),   S(59, -186),    S(-12, -162),   S(-74, -135),   S(-74, -153),   S(-129, -151),  S(-124, -112),  S(-175, -127),  //
    S(-58, -196),   S(115, -191),   S(21, -160),    S(-71, -105),   S(-92, -152),   S(-124, -139),  S(-128, -91),   S(-176, -114),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-296, -159),  S(-5, -98),     S(-521, 271),   S(-17, 74),     S(-234, 147),   S(-321, 187),   S(-228, -69),   S(-390, 15),    //
    S(82, -63),     S(57, 93),      S(216, -32),    S(25, 65),      S(97, 88),      S(136, -44),    S(0, -8),       S(65, -69),     //
    S(-11, 78),     S(11, 143),     S(183, 98),     S(141, 74),     S(127, 87),     S(25, 77),      S(20, 76),      S(-78, 52),     //
    S(99, 37),      S(2, 111),      S(54, 120),     S(36, 124),     S(51, 110),     S(52, 80),      S(-24, 47),     S(-5, 70),      //
    S(63, 39),      S(72, 58),      S(61, 54),      S(14, 74),      S(14, 82),      S(24, 76),      S(-25, 67),     S(1, -35),      //
    S(-27, 5),      S(4, -23),      S(-12, -33),    S(15, 39),      S(26, 35),      S(-71, 9),      S(-52, -10),    S(-84, -16),    //
    S(41, 24),      S(11, 13),      S(-51, 7),      S(-31, 22),     S(-36, -1),     S(-73, -15),    S(-48, -36),    S(-98, -117),   //
    S(-92, 45),     S(-7, -40),     S(19, -72),     S(41, -38),     S(45, -42),     S(-25, -126),   S(-62, -20),    S(-204, 0),     //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-149, 72),    S(-40, 6),      S(-553, 110),   S(-303, 104),   S(-325, 126),   S(-489, 125),   S(-53, 95),     S(13, 56),      //
    S(-32, -23),    S(-24, 79),     S(25, 40),      S(29, -7),      S(-5, 45),      S(0, 46),       S(20, 25),      S(-86, 26),     //
    S(-11, 71),     S(13, 75),      S(238, 41),     S(105, 34),     S(67, 45),      S(6, 76),       S(117, 6),      S(7, 50),       //
    S(16, -8),      S(19, 45),      S(78, 33),      S(89, 65),      S(118, 42),     S(36, 55),      S(20, 47),      S(-73, 80),     //
    S(39, -51),     S(10, 23),      S(36, 12),      S(50, 53),      S(41, 83),      S(0, 48),       S(-6, 2),       S(-12, -50),    //
    S(50, -12),     S(85, -27),     S(82, -21),     S(0, 45),       S(-5, 52),      S(-20, 66),     S(52, -23),     S(26, -54),     //
    S(0, -57),      S(88, -49),     S(23, -23),     S(-1, 4),       S(-14, -12),    S(25, -23),     S(-12, -8),     S(37, -111),    //
    S(-1, 43),      S(-15, 16),     S(-19, 31),     S(-4, -42),     S(-27, -38),    S(6, -7),       S(26, -80),     S(-54, 26),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(80, 21),      S(305, -6),     S(22, 86),      S(78, 60),      S(82, 57),      S(30, 68),      S(76, 47),      S(66, 62),      //
    S(127, 39),     S(132, 63),     S(228, 35),     S(104, 107),    S(129, 88),     S(34, 118),     S(-14, 119),    S(19, 106),     //
    S(-18, 83),     S(262, 0),      S(189, 32),     S(183, 30),     S(116, 33),     S(24, 101),     S(65, 67),      S(-43, 86),     //
    S(-32, 73),     S(-11, 68),     S(43, 53),      S(101, -2),     S(62, 16),      S(7, 101),      S(-8, 68),      S(-102, 86),    //
    S(-111, -19),   S(26, -36),     S(-60, 43),     S(-40, 24),     S(-63, 30),     S(-89, 78),     S(-127, 65),    S(-135, 57),    //
    S(-100, -48),   S(7, -112),     S(-59, -28),    S(-78, -16),    S(-47, -41),    S(-128, 32),    S(-142, 19),    S(-156, 14),    //
    S(-145, 12),    S(-86, -75),    S(-60, -57),    S(-48, -48),    S(-54, -36),    S(-76, -19),    S(-132, -34),   S(-144, -46),   //
    S(-123, -15),   S(-96, 2),      S(-62, -30),    S(-37, -41),    S(-52, -16),    S(-59, -23),    S(-78, -37),    S(-99, -24),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(27, 40),      S(54, -1),      S(-22, 164),    S(-31, 146),    S(7, 87),       S(-75, 180),    S(57, 7),       S(-58, 32),     //
    S(63, 106),     S(-156, 279),   S(-65, 295),    S(-257, 425),   S(-160, 291),   S(-177, 287),   S(-96, 127),    S(-30, 66),     //
    S(-81, 213),    S(25, 195),     S(22, 225),     S(-14, 235),    S(-113, 276),   S(-100, 225),   S(-20, 84),     S(-35, 45),     //
    S(36, 43),      S(10, 154),     S(-21, 147),    S(-58, 252),    S(-48, 225),    S(1, 71),       S(-14, 46),     S(-33, 42),     //
    S(20, 55),      S(62, 25),      S(-7, 161),     S(-32, 153),    S(-68, 189),    S(-39, 113),    S(3, -38),      S(-21, -44),    //
    S(70, -141),    S(39, -15),     S(33, 32),      S(-48, 92),     S(-6, 15),      S(1, -6),       S(16, -59),     S(-12, -17),    //
    S(39, -219),    S(45, -298),    S(19, -152),    S(46, -70),     S(0, -35),      S(34, -142),    S(31, -121),    S(-23, -33),    //
    S(-70, -42),    S(-22, -403),   S(-9, -276),    S(19, -237),    S(45, -143),    S(44, -190),    S(7, -129),     S(-62, -3),     //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(527, -607),   S(398, -166),   S(-500, 177),   S(-472, 156),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(300, -92),    S(-169, 200),   S(-110, 228),   S(23, 191),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-158, 79),    S(38, 150),     S(122, 130),    S(28, 105),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-226, 57),    S(-88, 158),    S(103, 113),    S(13, 97),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-217, -4),    S(-71, 82),     S(34, 70),      S(-105, 132),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-145, -54),   S(65, -19),     S(-28, 44),     S(-90, 103),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(89, -134),    S(143, -66),    S(33, 4),       S(-84, 72),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(9, -223),     S(98, -159),    S(-29, -102),   S(0, -130),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
