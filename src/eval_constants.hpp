#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(280, 435);
inline const PParam KNIGHT_MAT = S(967, 1001);
inline const PParam BISHOP_MAT = S(972, 1063);
inline const PParam ROOK_MAT   = S(1477, 1795);
inline const PParam QUEEN_MAT  = S(3219, 3261);
inline const PParam TEMPO_VAL  = S(47, 17);

inline const PParam BISHOP_PAIR_VAL  = S(64, 189);
inline const PParam DOUBLED_PAWN_VAL = S(-48, -75);

inline const PParam POTENTIAL_CHECKER_VAL = S(-73, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(0, 21), S(53, 26), S(84, 65), S(197, 118), S(454, 377), S(1747, 1222),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(48, 47), S(51, 22), S(54, 38), S(101, 115), S(664, -149),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-29, 30), S(-33, 37), S(-19, 82), S(54, 137), S(99, 245), S(161, 71),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(45, -31), S(23, 9), S(-3, 47), S(5, 85), S(79, 169), S(130, 306),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(13, -39), S(-4, 4), S(-25, -29), S(-11, -74), S(-45, -112), S(-217, -151),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-218, -187), S(-110, -132), S(-55, -36), S(-4, -11), S(42, 10), S(64, 54), S(95, 52), S(119, 50), S(170, -31),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-125, -268), S(-76, -176), S(-17, -113), S(-3, -58), S(33, -27), S(45, -4), S(67, 3), S(77, 12), S(84, 24), S(86, 20), S(111, 8), S(169, -45), S(214, -63), S(284, -98),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-205, -343), S(-88, -123), S(-45, -48), S(-25, -50), S(-10, -14), S(3, 2), S(23, 9), S(50, 10), S(75, 20), S(102, 29), S(126, 29), S(137, 37), S(182, 24), S(170, 24), S(271, -72),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(72, 103), S(-655, 623), S(-204, -420), S(-145, -224), S(-105, -268), S(-70, -220), S(-104, -19), S(-81, -51), S(-67, -19), S(-65, 9), S(-56, 29), S(-56, 65), S(-33, 53), S(-21, 50), S(-13, 53), S(-1, 49), S(-15, 75), S(6, 36), S(20, 25), S(54, -30), S(92, -71), S(130, -140), S(220, -209), S(414, -404), S(369, -409), S(960, -713), S(740, -617), S(1324, -981),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(361, 721), S(95, 423), S(25, 476), S(27, 507), S(6, 502), S(-16, 487), S(-1, 493), S(7, 468), S(55, 353),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(86, -40), S(152, -89),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(28, -1), S(138, -44),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(67, -62), S(86, -78), S(138, -78), S(152, -134),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-53, 37), S(-71, 50), S(7, -24), S(174, -118), S(417, -269),
};

inline const PParam PAWN_THREAT_KNIGHT = S(209, 69);
inline const PParam PAWN_THREAT_BISHOP = S(177, 84);
inline const PParam PAWN_THREAT_ROOK   = S(162, 49);
inline const PParam PAWN_THREAT_QUEEN  = S(146, -77);

inline const PParam KNIGHT_THREAT_BISHOP = S(83, 70);
inline const PParam KNIGHT_THREAT_ROOK   = S(223, -8);
inline const PParam KNIGHT_THREAT_QUEEN  = S(132, -68);

inline const PParam BISHOP_THREAT_KNIGHT = S(82, 21);
inline const PParam BISHOP_THREAT_ROOK   = S(209, 43);
inline const PParam BISHOP_THREAT_QUEEN  = S(173, 33);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-42, 466),    S(93, 477),     S(198, 434),    S(374, 224),    S(300, 251),    S(294, 344),    S(169, 381),    S(251, 371),    //
    S(21, -3),      S(189, 13),     S(122, -58),    S(158, -158),   S(78, -158),    S(16, -78),     S(-26, -6),     S(-50, -12),    //
    S(-38, -59),    S(-25, -53),    S(-24, -98),    S(-34, -128),   S(-46, -130),   S(-91, -128),   S(-107, -58),   S(-129, -37),   //
    S(-33, -133),   S(-13, -94),    S(-48, -138),   S(-49, -140),   S(-67, -152),   S(-99, -132),   S(-139, -62),   S(-151, -81),   //
    S(-28, -166),   S(33, -162),    S(-28, -121),   S(-88, -107),   S(-81, -129),   S(-130, -127),  S(-137, -99),   S(-169, -101),  //
    S(-21, -168),   S(130, -165),   S(46, -123),    S(-52, -84),    S(-71, -139),   S(-95, -121),   S(-110, -80),   S(-145, -97),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-403, -157),  S(-75, -81),    S(-555, 313),   S(-61, 67),     S(-330, 156),   S(-359, 175),   S(-413, -14),   S(-530, 45),    //
    S(50, -15),     S(77, 69),      S(200, -54),    S(34, 76),      S(88, 54),      S(41, 5),       S(-37, 22),     S(16, -38),     //
    S(37, 29),      S(-2, 126),     S(215, 61),     S(92, 101),     S(138, 65),     S(32, 70),      S(32, 35),      S(-60, 16),     //
    S(113, 45),     S(39, 98),      S(88, 98),      S(72, 116),     S(83, 82),      S(72, 76),      S(4, 29),       S(15, 48),      //
    S(80, 27),      S(107, 33),     S(83, 67),      S(48, 63),      S(52, 71),      S(52, 74),      S(11, 29),      S(22, -59),     //
    S(1, -24),      S(30, -33),     S(12, -24),     S(35, 41),      S(51, 36),      S(-31, 0),      S(-25, -15),    S(-62, -18),    //
    S(21, 61),      S(45, -20),     S(-9, -16),     S(-13, 7),      S(-19, -10),    S(-42, -37),    S(-21, -66),    S(-105, -142),  //
    S(-35, -28),    S(-2, -25),     S(56, -99),     S(36, -31),     S(69, -49),     S(4, -150),     S(-50, -44),    S(-149, -95),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-109, 109),   S(-49, 36),     S(-549, 133),   S(-279, 123),   S(-298, 141),   S(-415, 143),   S(1, 84),       S(-9, 62),      //
    S(15, -28),     S(4, 81),       S(26, 65),      S(29, 26),      S(23, 45),      S(10, 60),      S(0, 48),       S(-55, 53),     //
    S(19, 84),      S(70, 80),      S(267, 48),     S(129, 47),     S(83, 57),      S(26, 93),      S(140, 31),     S(11, 89),      //
    S(31, 28),      S(33, 80),      S(131, 48),     S(127, 69),     S(136, 69),     S(58, 83),      S(44, 58),      S(-32, 74),     //
    S(32, -13),     S(44, 46),      S(65, 42),      S(83, 66),      S(84, 96),      S(32, 73),      S(33, 20),      S(24, -44),     //
    S(69, -22),     S(116, 2),      S(114, 4),      S(40, 58),      S(33, 65),      S(20, 75),      S(86, 4),       S(43, -44),     //
    S(38, -61),     S(116, -28),    S(61, -18),     S(39, 17),      S(31, -13),     S(61, -26),     S(7, 9),        S(74, -121),    //
    S(57, -9),      S(40, -2),      S(22, 22),      S(30, -39),     S(14, -36),     S(37, 2),       S(52, -82),     S(-25, 4),      //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(123, 29),     S(222, 29),     S(123, 71),     S(89, 88),      S(115, 63),     S(72, 61),      S(95, 62),      S(104, 62),     //
    S(132, 71),     S(182, 62),     S(257, 36),     S(165, 94),     S(162, 93),     S(76, 110),     S(38, 109),     S(58, 103),     //
    S(46, 83),      S(304, 13),     S(260, 20),     S(267, 10),     S(173, 46),     S(85, 82),      S(132, 53),     S(-13, 102),    //
    S(11, 71),      S(55, 63),      S(93, 51),      S(141, -2),     S(106, 29),     S(41, 89),      S(21, 79),      S(-72, 87),     //
    S(-108, 19),    S(29, 6),       S(-4, 36),      S(0, 32),       S(-8, 27),      S(-44, 84),     S(-91, 85),     S(-113, 67),    //
    S(-95, 4),      S(20, -73),     S(-12, -22),    S(-44, -5),     S(-10, -31),    S(-101, 36),    S(-104, 20),    S(-110, 7),     //
    S(-149, 21),    S(-71, -41),    S(-31, -45),    S(-25, -35),    S(-42, -22),    S(-52, -17),    S(-104, -31),   S(-114, -34),   //
    S(-123, 9),     S(-87, 20),     S(-49, -15),    S(-13, -35),    S(-25, -17),    S(-34, -21),    S(-52, -34),    S(-84, -13),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(43, 97),      S(80, 32),      S(102, 61),     S(-75, 217),    S(3, 118),      S(-64, 166),    S(44, 45),      S(-19, 41),     //
    S(87, 77),      S(-85, 240),    S(-40, 293),    S(-146, 326),   S(-91, 240),    S(-141, 266),   S(-65, 134),    S(-9, 45),      //
    S(-34, 186),    S(98, 151),     S(56, 203),     S(-9, 258),     S(-30, 208),    S(-74, 219),    S(15, 91),      S(-12, 30),     //
    S(52, 78),      S(34, 156),     S(26, 163),     S(2, 234),      S(-3, 213),     S(6, 116),      S(8, 53),       S(-22, 67),     //
    S(28, 100),     S(60, 70),      S(30, 134),     S(0, 171),      S(-22, 184),    S(-18, 137),    S(-8, 34),      S(-13, -17),    //
    S(63, -127),    S(60, -12),     S(46, 57),      S(-32, 120),    S(12, 41),      S(4, 49),       S(30, -54),     S(-3, -36),     //
    S(54, -240),    S(44, -292),    S(22, -120),    S(44, -41),     S(-1, -2),      S(46, -128),    S(31, -58),     S(-14, -34),    //
    S(-86, -26),    S(-76, -326),   S(-12, -284),   S(14, -201),    S(41, -110),    S(64, -207),    S(38, -153),    S(-19, -54),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(437, -662),   S(280, -133),   S(-61, 0),      S(-144, 64),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(362, -155),   S(59, 109),     S(-29, 157),    S(282, 77),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-11, 54),     S(127, 144),    S(174, 123),    S(222, 69),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-215, 86),    S(10, 139),     S(148, 130),    S(103, 96),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-191, 27),    S(-20, 90),     S(46, 95),      S(-26, 141),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-133, -11),   S(80, 11),      S(-18, 77),     S(-70, 122),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(94, -99),     S(135, -32),    S(19, 36),      S(-94, 96),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-16, -156),   S(85, -120),    S(-45, -73),    S(-14, -102),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
