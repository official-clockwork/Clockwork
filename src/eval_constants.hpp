#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(265, 437);
inline const PScore KNIGHT_MAT = S(831, 1016);
inline const PScore BISHOP_MAT = S(863, 1109);
inline const PScore ROOK_MAT   = S(1261, 1826);
inline const PScore QUEEN_MAT  = S(2755, 3336);
inline const PScore TEMPO_VAL  = S(30, 16);

inline const PScore BISHOP_PAIR_VAL  = S(60, 204);
inline const PScore DOUBLED_PAWN_VAL = S(-48, -74);

inline const PScore POTENTIAL_CHECKER_VAL = S(-74, -4);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(3, 24), S(54, 39), S(90, 77), S(216, 140), S(330, 689), S(1372, 1443),
};
inline const std::array<PScore, 5> DEFENDED_PAWN = {
    S(52, 54), S(54, 25), S(51, 47), S(108, 128), S(714, -162),
};
inline const std::array<PScore, 6> PASSED_PAWN = {
    S(-14, 18), S(-36, 51), S(-29, 111), S(38, 170), S(66, 299), S(-13, 75),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-228, -259), S(-135, -142), S(-88, -38), S(-40, -2), S(2, 19), S(20, 70), S(45, 75), S(73, 68), S(118, -4),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-184, -242), S(-124, -175), S(-65, -127), S(-51, -65), S(-15, -28), S(0, -5), S(25, -1), S(35, 7), S(42, 27), S(42, 20), S(53, 21), S(156, -48), S(171, -79), S(267, -142),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-251, -360), S(-95, -95), S(-57, -34), S(-41, -22), S(-22, 0), S(-10, 7), S(7, 24), S(37, 15), S(65, 21), S(84, 37), S(110, 31), S(120, 41), S(170, 27), S(139, 37), S(263, -73),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(28, 82), S(-557, 478), S(-185, -436), S(-179, -80), S(-105, -336), S(-103, -221), S(-134, -14), S(-104, -46), S(-94, -26), S(-86, 6), S(-91, 46), S(-85, 73), S(-58, 55), S(-51, 55), S(-35, 44), S(-38, 63), S(-46, 92), S(-31, 62), S(-9, 23), S(16, -3), S(76, -80), S(135, -152), S(155, -155), S(445, -477), S(334, -430), S(1003, -754), S(741, -577), S(1855, -1339),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(379, 724), S(106, 416), S(16, 478), S(21, 514), S(-6, 508), S(-19, 478), S(-18, 494), S(-13, 465), S(45, 338),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(86, -47), S(152, -93),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(29, -9), S(129, -44),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(73, -69), S(105, -93), S(154, -88), S(219, -151),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-57, 49), S(-59, 39), S(14, -26), S(193, -124), S(345, -224),
};

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(-126, 486),   S(56, 448),     S(130, 463),    S(284, 234),    S(248, 239),    S(251, 365),    S(143, 359),    S(214, 359),    //
    S(13, -32),     S(161, -22),    S(123, -101),   S(161, -227),   S(82, -232),    S(11, -110),    S(-45, -29),    S(-47, -59),    //
    S(-34, -82),    S(-34, -67),    S(-27, -121),   S(-34, -154),   S(-42, -154),   S(-96, -138),   S(-110, -74),   S(-130, -52),   //
    S(-45, -152),   S(-19, -110),   S(-62, -149),   S(-69, -146),   S(-84, -161),   S(-115, -144),  S(-147, -73),   S(-158, -97),   //
    S(-30, -187),   S(19, -186),    S(-49, -141),   S(-110, -117),  S(-106, -134),  S(-151, -130),  S(-157, -105),  S(-171, -118),  //
    S(-31, -185),   S(116, -188),   S(26, -142),    S(-68, -101),   S(-86, -166),   S(-111, -130),  S(-121, -91),   S(-149, -113),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-301, -173),  S(13, -104),    S(-529, 275),   S(-33, 76),     S(-251, 144),   S(-338, 188),   S(-229, -89),   S(-396, 2),     //
    S(77, -64),     S(58, 81),      S(214, -32),    S(34, 59),      S(105, 86),     S(139, -51),    S(-2, -20),     S(58, -78),     //
    S(-6, 60),      S(15, 141),     S(194, 93),     S(153, 68),     S(134, 83),     S(39, 69),      S(26, 77),      S(-82, 54),     //
    S(99, 38),      S(6, 108),      S(65, 116),     S(47, 127),     S(60, 111),     S(57, 81),      S(-22, 47),     S(-1, 62),      //
    S(62, 42),      S(72, 60),      S(65, 59),      S(17, 82),      S(20, 88),      S(31, 77),      S(-26, 77),     S(0, -28),      //
    S(-28, 0),      S(9, -26),      S(-3, -23),     S(17, 44),      S(32, 41),      S(-61, 16),     S(-48, -5),     S(-89, -12),    //
    S(36, 32),      S(8, 20),       S(-53, 9),      S(-31, 23),     S(-38, 1),      S(-69, -11),    S(-54, -23),    S(-101, -92),   //
    S(-110, 49),    S(-10, -36),    S(18, -63),     S(41, -31),     S(50, -41),     S(-28, -103),   S(-68, -9),     S(-207, 20),    //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-154, 70),    S(-39, 18),     S(-547, 121),   S(-283, 94),    S(-334, 143),   S(-490, 127),   S(-42, 96),     S(8, 59),       //
    S(-35, -9),     S(-29, 82),     S(32, 43),      S(36, 0),       S(-3, 49),      S(2, 44),       S(25, 17),      S(-85, 29),     //
    S(-10, 80),     S(17, 76),      S(246, 46),     S(112, 37),     S(71, 48),      S(10, 71),      S(118, -1),     S(8, 57),       //
    S(18, -4),      S(24, 49),      S(86, 37),      S(94, 71),      S(123, 47),     S(43, 56),      S(23, 48),      S(-71, 86),     //
    S(33, -34),     S(11, 34),      S(40, 23),      S(52, 63),      S(46, 92),      S(2, 57),       S(-3, 11),      S(-11, -35),    //
    S(44, -5),      S(83, -20),     S(87, -17),     S(2, 50),       S(-3, 62),      S(-19, 74),     S(51, -8),      S(19, -43),     //
    S(4, -53),      S(93, -49),     S(23, -24),     S(2, 2),        S(-10, -9),     S(23, -10),     S(-12, -2),     S(32, -98),     //
    S(-7, 52),      S(-10, 26),     S(-20, 37),     S(-2, -38),     S(-19, -35),    S(3, 2),        S(17, -57),     S(-61, 42),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(81, 22),      S(285, 4),      S(30, 85),      S(86, 57),      S(72, 63),      S(25, 77),      S(65, 61),      S(65, 68),      //
    S(116, 46),     S(140, 60),     S(234, 29),     S(105, 107),    S(132, 83),     S(36, 117),     S(-18, 122),    S(12, 115),     //
    S(-16, 83),     S(284, -18),    S(196, 26),     S(197, 20),     S(119, 26),     S(30, 95),      S(70, 66),      S(-46, 92),     //
    S(-31, 79),     S(-2, 65),      S(53, 41),      S(105, -3),     S(67, 9),       S(8, 97),       S(0, 65),       S(-104, 93),    //
    S(-112, -8),    S(35, -31),     S(-50, 47),     S(-32, 21),     S(-60, 33),     S(-85, 81),     S(-120, 73),    S(-130, 64),    //
    S(-100, -31),   S(9, -99),      S(-53, -20),    S(-77, -5),     S(-45, -31),    S(-127, 44),    S(-141, 33),    S(-156, 29),    //
    S(-146, 23),    S(-88, -72),    S(-61, -56),    S(-47, -47),    S(-55, -35),    S(-74, -12),    S(-131, -26),   S(-138, -29),   //
    S(-121, -20),   S(-88, 0),      S(-62, -32),    S(-34, -42),    S(-49, -18),    S(-56, -27),    S(-73, -39),    S(-98, -24),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(14, 63),      S(63, -6),      S(-1, 158),     S(-23, 149),    S(9, 96),       S(-65, 181),    S(65, 4),       S(-68, 53),     //
    S(66, 111),     S(-151, 281),   S(-61, 300),    S(-254, 428),   S(-155, 289),   S(-174, 292),   S(-94, 129),    S(-25, 72),     //
    S(-72, 211),    S(26, 201),     S(31, 223),     S(-8, 236),     S(-106, 273),   S(-85, 210),    S(-12, 80),     S(-31, 43),     //
    S(35, 53),      S(20, 154),     S(-22, 158),    S(-50, 252),    S(-44, 231),    S(5, 75),       S(-5, 41),      S(-32, 56),     //
    S(21, 56),      S(63, 41),      S(-1, 166),     S(-28, 161),    S(-58, 187),    S(-33, 126),    S(7, -30),      S(-20, -31),    //
    S(74, -145),    S(43, -12),     S(37, 34),      S(-44, 101),    S(-1, 29),      S(5, 8),        S(19, -52),     S(-10, -14),    //
    S(32, -197),    S(50, -306),    S(17, -137),    S(49, -64),     S(2, -26),      S(35, -130),    S(34, -114),    S(-17, -27),    //
    S(-69, -29),    S(-8, -426),    S(-12, -267),   S(23, -234),    S(46, -137),    S(49, -185),    S(7, -120),     S(-61, 0),      //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(542, -652),   S(347, -173),   S(-519, 160),   S(-495, 152),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(288, -124),   S(-155, 178),   S(-92, 210),    S(38, 182),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-160, 53),    S(58, 129),     S(161, 112),    S(49, 94),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-209, 38),    S(-78, 143),    S(96, 107),     S(29, 87),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-215, -13),   S(-61, 74),     S(49, 69),      S(-109, 135),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-157, -41),   S(54, -10),     S(-31, 50),     S(-95, 111),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(97, -136),    S(145, -60),    S(34, 11),      S(-85, 77),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(1, -211),     S(97, -160),    S(-33, -103),   S(-2, -134),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
