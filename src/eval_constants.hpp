#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(181, 164);
inline const PParam KNIGHT_MAT = S(742, 546);
inline const PParam BISHOP_MAT = S(781, 538);
inline const PParam ROOK_MAT   = S(740, 674);
inline const PParam QUEEN_MAT  = S(1624, 1199);
inline const PParam TEMPO_VAL  = S(57, 15);

inline const PParam BISHOP_PAIR_VAL  = S(77, 174);
inline const PParam DOUBLED_PAWN_VAL = S(-34, -76);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, 0);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(17, 20), S(56, 31), S(76, 69), S(195, 137), S(517, 259), S(635, 696),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(62, 44), S(55, 30), S(61, 56), S(142, 118), S(612, -43),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-74, -90), S(-63, -73), S(-31, -4), S(34, 70), S(75, 198), S(277, 298),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(43, -39), S(30, -1), S(13, 29), S(19, 73), S(87, 148), S(183, 269),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(14, -42), S(-1, 5), S(-23, -16), S(-22, -39), S(-40, -82), S(-226, -137),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(23, 86), S(-19, 91), S(-11, 38), S(1, 9), S(12, 12), S(41, 9), S(21, -3),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-174, -50), S(29, -2), S(-8, 37), S(12, 67), S(19, 91), S(41, 89), S(-6, 108),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(0, -11), S(105, 147), S(162, 204), S(205, 239), S(253, 254), S(280, 296), S(317, 291), S(351, 286), S(403, 214),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(43, -49), S(114, 140), S(192, 198), S(220, 243), S(248, 276), S(268, 294), S(282, 303), S(299, 306), S(310, 311), S(317, 298), S(340, 280), S(394, 228), S(407, 218), S(474, 170),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(200, 150), S(285, 438), S(337, 501), S(373, 511), S(403, 536), S(422, 555), S(444, 565), S(473, 564), S(499, 572), S(526, 581), S(554, 580), S(571, 584), S(606, 578), S(626, 560), S(767, 435),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-8, 2), S(719, 394), S(814, 535), S(868, 707), S(896, 873), S(930, 943), S(932, 1059), S(958, 1061), S(968, 1093), S(980, 1110), S(987, 1133), S(994, 1148), S(1011, 1141), S(1022, 1140), S(1030, 1137), S(1049, 1119), S(1052, 1116), S(1069, 1089), S(1097, 1043), S(1133, 992), S(1172, 940), S(1234, 845), S(1253, 831), S(1314, 727), S(1264, 739), S(1250, 727), S(965, 801), S(846, 767),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(340, 161), S(135, -93), S(38, -11), S(23, 22), S(0, 16), S(-33, 16), S(-12, 12), S(-19, -6), S(-18, -70),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(78, -26), S(148, -72),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(33, -1), S(137, -39),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(66, -39), S(65, -64), S(104, -62), S(143, -121),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-56, 71), S(-88, 106), S(-54, 86), S(76, 31), S(207, -57),
};

inline const PParam PAWN_THREAT_KNIGHT = S(227, 70);
inline const PParam PAWN_THREAT_BISHOP = S(206, 115);
inline const PParam PAWN_THREAT_ROOK   = S(189, 56);
inline const PParam PAWN_THREAT_QUEEN  = S(170, -65);

inline const PParam KNIGHT_THREAT_BISHOP = S(99, 68);
inline const PParam KNIGHT_THREAT_ROOK   = S(237, 1);
inline const PParam KNIGHT_THREAT_QUEEN  = S(151, -75);

inline const PParam BISHOP_THREAT_KNIGHT = S(103, 24);
inline const PParam BISHOP_THREAT_ROOK   = S(234, 49);
inline const PParam BISHOP_THREAT_QUEEN  = S(190, 30);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-5, -11), S(-8, -3), S(-7, -12), S(-12, -22), S(-17, -27), S(-21, -33), S(-22, -40), S(-27, -39), S(-36, -47),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(228, 309),    S(238, 357),    S(292, 327),    S(341, 216),    S(291, 209),    S(277, 273),    S(179, 293),    S(230, 266),    //
    S(161, 194),    S(282, 222),    S(256, 166),    S(253, 113),    S(210, 95),     S(156, 143),    S(121, 188),    S(60, 191),     //
    S(96, 158),     S(120, 163),    S(137, 120),    S(124, 106),    S(109, 100),    S(69, 108),     S(27, 156),     S(-6, 177),     //
    S(87, 104),     S(109, 133),    S(106, 100),    S(97, 101),     S(75, 92),      S(45, 107),     S(-9, 156),     S(-31, 142),    //
    S(69, 78),      S(134, 80),     S(88, 122),     S(58, 127),     S(42, 117),     S(3, 117),      S(-17, 132),    S(-47, 126),    //
    S(80, 82),      S(207, 86),     S(163, 120),    S(107, 139),    S(73, 126),     S(39, 124),     S(12, 150),     S(-26, 136),    //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-250, -14),   S(-198, 184),   S(-274, 332),   S(4, 197),      S(-122, 221),   S(-198, 225),   S(-400, 204),   S(-385, 116),   //
    S(116, 139),    S(185, 146),    S(282, 77),     S(235, 137),    S(235, 144),    S(172, 123),    S(115, 147),    S(93, 105),     //
    S(178, 117),    S(227, 160),    S(308, 157),    S(265, 177),    S(265, 167),    S(182, 177),    S(177, 145),    S(83, 150),     //
    S(218, 154),    S(193, 184),    S(227, 193),    S(212, 216),    S(220, 203),    S(186, 198),    S(157, 152),    S(148, 151),    //
    S(212, 140),    S(231, 136),    S(220, 165),    S(201, 177),    S(192, 188),    S(183, 185),    S(161, 150),    S(154, 95),     //
    S(122, 116),    S(146, 101),    S(147, 117),    S(156, 162),    S(164, 159),    S(109, 136),    S(111, 99),     S(78, 96),      //
    S(127, 132),    S(152, 105),    S(131, 107),    S(133, 124),    S(120, 118),    S(94, 97),      S(112, 86),     S(53, 16),      //
    S(83, 83),      S(126, 119),    S(140, 92),     S(152, 98),     S(146, 106),    S(102, 74),     S(87, 104),     S(30, 61),      //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-22, 246),    S(-48, 232),    S(-277, 253),   S(-162, 268),   S(-111, 271),   S(-273, 295),   S(-32, 276),    S(22, 247),     //
    S(139, 142),    S(129, 222),    S(146, 203),    S(131, 204),    S(106, 219),    S(143, 210),    S(121, 203),    S(76, 200),     //
    S(169, 200),    S(229, 206),    S(317, 214),    S(244, 211),    S(226, 212),    S(197, 226),    S(247, 197),    S(132, 203),    //
    S(171, 163),    S(178, 223),    S(234, 219),    S(242, 244),    S(251, 242),    S(185, 238),    S(156, 222),    S(110, 201),    //
    S(176, 134),    S(196, 184),    S(203, 207),    S(211, 231),    S(205, 248),    S(154, 239),    S(142, 196),    S(129, 137),    //
    S(193, 135),    S(233, 160),    S(241, 174),    S(183, 215),    S(167, 219),    S(164, 217),    S(192, 173),    S(158, 138),    //
    S(177, 98),     S(227, 125),    S(200, 137),    S(174, 167),    S(163, 153),    S(166, 141),    S(147, 152),    S(166, 88),     //
    S(174, 115),    S(167, 158),    S(173, 166),    S(188, 130),    S(197, 120),    S(192, 160),    S(179, 134),    S(153, 136),    //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(576, 474),    S(625, 477),    S(554, 507),    S(567, 499),    S(577, 488),    S(531, 499),    S(544, 499),    S(556, 502),    //
    S(505, 523),    S(581, 500),    S(654, 479),    S(597, 515),    S(611, 505),    S(561, 513),    S(504, 530),    S(492, 538),    //
    S(495, 501),    S(633, 463),    S(668, 455),    S(685, 445),    S(640, 455),    S(564, 495),    S(580, 484),    S(459, 535),    //
    S(446, 497),    S(509, 490),    S(547, 482),    S(589, 438),    S(558, 463),    S(494, 509),    S(469, 513),    S(403, 521),    //
    S(379, 455),    S(457, 458),    S(448, 471),    S(449, 469),    S(444, 464),    S(420, 507),    S(389, 504),    S(367, 495),    //
    S(345, 437),    S(417, 408),    S(417, 435),    S(403, 437),    S(422, 417),    S(374, 468),    S(368, 453),    S(343, 453),    //
    S(291, 446),    S(388, 386),    S(410, 403),    S(423, 401),    S(419, 405),    S(401, 420),    S(378, 399),    S(339, 420),    //
    S(320, 445),    S(353, 453),    S(403, 417),    S(439, 400),    S(430, 412),    S(416, 422),    S(396, 416),    S(366, 434),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(819, 777),    S(868, 733),    S(871, 750),    S(767, 867),    S(809, 819),    S(754, 843),    S(806, 775),    S(738, 803),    //
    S(762, 887),    S(697, 970),    S(711, 997),    S(640, 1012),   S(649, 986),    S(625, 1005),   S(659, 934),    S(698, 868),    //
    S(726, 912),    S(811, 915),    S(759, 979),    S(739, 992),    S(698, 980),    S(655, 1000),   S(724, 902),    S(691, 873),    //
    S(761, 862),    S(754, 938),    S(725, 963),    S(713, 1033),   S(691, 1023),   S(682, 960),    S(710, 888),    S(711, 837),    //
    S(729, 893),    S(758, 859),    S(733, 928),    S(701, 985),    S(686, 978),    S(686, 940),    S(699, 863),    S(704, 815),    //
    S(740, 736),    S(756, 788),    S(759, 855),    S(701, 894),    S(714, 852),    S(717, 860),    S(729, 787),    S(712, 784),    //
    S(724, 642),    S(751, 547),    S(741, 681),    S(755, 760),    S(728, 781),    S(747, 709),    S(721, 771),    S(713, 758),    //
    S(675, 716),    S(735, 472),    S(729, 484),    S(761, 578),    S(764, 665),    S(766, 620),    S(749, 655),    S(694, 732),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-235, -335),  S(25, -2),      S(-107, 37),    S(-172, 52),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(120, -91),    S(-11, 163),    S(0, 153),      S(113, 84),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-70, 63),     S(52, 150),     S(88, 122),     S(71, 79),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-285, 83),    S(4, 108),      S(-4, 109),     S(-60, 96),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-256, 40),    S(-73, 81),     S(-57, 88),     S(-136, 125),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-165, 10),    S(23, 27),      S(-63, 78),     S(-107, 106),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(55, -77),     S(104, -14),    S(16, 31),      S(-63, 76),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-62, -116),   S(70, -95),     S(-24, -60),    S(-39, -60),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// Epoch duration: 38.9337s
// Loss: 0.00246796
// clang-format on
}
