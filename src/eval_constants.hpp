#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(281, 431);
inline const PParam KNIGHT_MAT = S(973, 981);
inline const PParam BISHOP_MAT = S(989, 1059);
inline const PParam ROOK_MAT   = S(1502, 1777);
inline const PParam QUEEN_MAT  = S(3314, 3200);
inline const PParam TEMPO_VAL  = S(50, 16);

inline const PParam BISHOP_PAIR_VAL  = S(68, 186);
inline const PParam DOUBLED_PAWN_VAL = S(-46, -76);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(4, 20), S(53, 29), S(83, 65), S(195, 123), S(471, 344), S(1726, 1105),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(51, 47), S(52, 23), S(55, 41), S(110, 112), S(683, -161),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-28, 29), S(-32, 37), S(-17, 83), S(52, 140), S(96, 249), S(178, 59),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(48, -29), S(25, 9), S(0, 46), S(7, 86), S(87, 166), S(164, 298),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(13, -37), S(-4, 3), S(-25, -31), S(-16, -74), S(-55, -111), S(-218, -150),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-228, -177), S(-105, -108), S(-48, -29), S(3, -4), S(50, 14), S(74, 57), S(107, 54), S(133, 52), S(182, -26),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-146, -305), S(-73, -188), S(-6, -122), S(9, -68), S(44, -35), S(58, -14), S(79, -4), S(90, 4), S(97, 15), S(100, 10), S(127, -3), S(181, -55), S(224, -77), S(299, -111),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-192, -361), S(-99, -121), S(-48, -49), S(-23, -51), S(-5, -14), S(11, 0), S(30, 8), S(59, 7), S(83, 18), S(110, 27), S(135, 27), S(147, 33), S(189, 24), S(185, 19), S(290, -80),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(76, 105), S(-429, -123), S(-198, -531), S(-153, -282), S(-116, -251), S(-77, -207), S(-105, -12), S(-78, -50), S(-66, -10), S(-63, 14), S(-54, 37), S(-52, 66), S(-31, 58), S(-18, 54), S(-12, 59), S(3, 50), S(-10, 75), S(6, 43), S(21, 31), S(53, -24), S(89, -62), S(121, -130), S(210, -198), S(404, -388), S(348, -384), S(965, -715), S(727, -593), S(1304, -952),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(364, 756), S(112, 420), S(36, 475), S(33, 507), S(9, 501), S(-19, 488), S(0, 493), S(4, 467), S(44, 356),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(87, -40), S(151, -87),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(29, 0), S(138, -43),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -62), S(83, -78), S(134, -77), S(139, -130),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-51, 35), S(-66, 47), S(6, -22), S(169, -113), S(392, -254),
};

inline const PParam PAWN_THREAT_KNIGHT = S(212, 67);
inline const PParam PAWN_THREAT_BISHOP = S(186, 80);
inline const PParam PAWN_THREAT_ROOK   = S(174, 48);
inline const PParam PAWN_THREAT_QUEEN  = S(152, -78);

inline const PParam KNIGHT_THREAT_BISHOP = S(88, 70);
inline const PParam KNIGHT_THREAT_ROOK   = S(228, -5);
inline const PParam KNIGHT_THREAT_QUEEN  = S(137, -69);

inline const PParam BISHOP_THREAT_KNIGHT = S(86, 23);
inline const PParam BISHOP_THREAT_ROOK   = S(211, 49);
inline const PParam BISHOP_THREAT_QUEEN  = S(178, 43);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(48, 445),     S(119, 474),    S(194, 434),    S(361, 234),    S(289, 257),    S(281, 353),    S(159, 391),    S(247, 374),    //
    S(26, -8),      S(178, 14),     S(125, -62),    S(164, -158),   S(86, -159),    S(21, -83),     S(-18, -10),    S(-44, -18),    //
    S(-35, -62),    S(-16, -57),    S(-12, -105),   S(-26, -130),   S(-37, -133),   S(-78, -131),   S(-100, -63),   S(-123, -40),   //
    S(-32, -133),   S(-12, -97),    S(-38, -141),   S(-42, -142),   S(-63, -153),   S(-92, -133),   S(-135, -65),   S(-146, -83),   //
    S(-34, -165),   S(30, -163),    S(-30, -121),   S(-81, -109),   S(-79, -129),   S(-127, -127),  S(-133, -103),  S(-165, -103),  //
    S(-28, -167),   S(119, -163),   S(46, -124),    S(-35, -96),    S(-59, -132),   S(-90, -122),   S(-107, -81),   S(-140, -100),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-384, -155),  S(-94, -64),    S(-521, 314),   S(-52, 69),     S(-303, 141),   S(-331, 160),   S(-502, 28),    S(-514, 29),    //
    S(36, 0),       S(115, 47),     S(213, -54),    S(61, 67),      S(114, 45),     S(54, 6),       S(-10, 16),     S(18, -33),     //
    S(50, 27),      S(27, 117),     S(218, 64),     S(110, 97),     S(153, 61),     S(46, 73),      S(49, 36),      S(-48, 24),     //
    S(123, 43),     S(58, 95),      S(103, 99),     S(89, 115),     S(99, 86),      S(83, 81),      S(22, 30),      S(21, 52),      //
    S(97, 25),      S(112, 33),     S(99, 64),      S(67, 64),      S(70, 71),      S(68, 75),      S(27, 32),      S(38, -56),     //
    S(16, -15),     S(40, -30),     S(24, -18),     S(38, 51),      S(55, 39),      S(-19, 5),      S(-8, -17),     S(-46, -23),    //
    S(30, 46),      S(58, -21),     S(12, -15),     S(4, 9),        S(-3, -9),      S(-24, -37),    S(-4, -49),     S(-81, -141),   //
    S(-11, -55),    S(20, -32),     S(51, -77),     S(56, -35),     S(39, -18),     S(-11, -101),   S(-27, -49),    S(-48, -86),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-164, 123),   S(-150, 68),    S(-499, 116),   S(-276, 117),   S(-301, 140),   S(-435, 148),   S(-62, 103),    S(-23, 67),     //
    S(16, -22),     S(9, 73),       S(21, 63),      S(33, 23),      S(22, 43),      S(12, 56),      S(-11, 48),     S(-64, 54),     //
    S(26, 72),      S(68, 75),      S(253, 47),     S(131, 42),     S(85, 54),      S(30, 89),      S(141, 29),     S(8, 79),       //
    S(38, 18),      S(37, 73),      S(129, 45),     S(132, 64),     S(133, 69),     S(60, 77),      S(44, 53),      S(-31, 67),     //
    S(29, -10),     S(52, 38),      S(67, 40),      S(85, 61),      S(81, 92),      S(29, 72),      S(25, 20),      S(19, -44),     //
    S(64, -24),     S(117, 0),      S(113, 3),      S(40, 55),      S(31, 63),      S(21, 68),      S(84, 3),       S(41, -46),     //
    S(54, -74),     S(110, -29),    S(67, -23),     S(41, 14),      S(32, -15),     S(50, -22),     S(7, 4),        S(51, -99),     //
    S(41, -25),     S(45, 6),       S(28, 17),      S(43, -38),     S(57, -57),     S(45, -3),      S(62, -62),     S(19, -25),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(134, 29),     S(225, 25),     S(119, 73),     S(93, 86),      S(118, 60),     S(76, 58),      S(96, 62),      S(113, 59),     //
    S(100, 84),     S(166, 69),     S(239, 44),     S(162, 94),     S(163, 91),     S(83, 106),     S(46, 106),     S(54, 104),     //
    S(44, 80),      S(256, 26),     S(257, 20),     S(263, 10),     S(182, 39),     S(93, 74),      S(137, 48),     S(-5, 98),      //
    S(7, 68),       S(58, 59),      S(99, 49),      S(146, -3),     S(109, 29),     S(45, 86),      S(24, 78),      S(-66, 85),     //
    S(-99, 20),     S(32, 9),       S(2, 33),       S(3, 31),       S(-3, 25),      S(-41, 82),     S(-76, 77),     S(-106, 63),    //
    S(-109, 9),     S(11, -66),     S(-14, -18),    S(-43, -6),     S(-8, -34),     S(-93, 35),     S(-99, 20),     S(-109, 7),     //
    S(-153, 22),    S(-65, -42),    S(-29, -44),    S(-22, -37),    S(-36, -24),    S(-48, -20),    S(-96, -34),    S(-110, -33),   //
    S(-120, 6),     S(-89, 18),     S(-45, -17),    S(-11, -36),    S(-20, -21),    S(-30, -23),    S(-51, -33),    S(-82, -14),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(55, 91),      S(86, 37),      S(87, 77),      S(-68, 214),    S(9, 116),      S(-71, 171),    S(36, 57),      S(-16, 43),     //
    S(84, 86),      S(-71, 237),    S(-45, 297),    S(-137, 319),   S(-94, 241),    S(-132, 259),   S(-63, 135),    S(-17, 55),     //
    S(-24, 180),    S(99, 149),     S(57, 204),     S(-2, 255),     S(-32, 211),    S(-73, 221),    S(15, 96),      S(-13, 38),     //
    S(51, 81),      S(33, 164),     S(19, 174),     S(10, 232),     S(-11, 222),    S(-4, 130),     S(11, 54),      S(-19, 63),     //
    S(27, 100),     S(61, 66),      S(28, 142),     S(-1, 176),     S(-21, 183),    S(-15, 132),    S(-7, 34),      S(-9, -13),     //
    S(62, -127),    S(59, -16),     S(48, 56),      S(-27, 112),    S(13, 36),      S(6, 44),       S(28, -48),     S(0, -40),      //
    S(33, -204),    S(47, -281),    S(25, -118),    S(46, -42),     S(5, -12),      S(45, -125),    S(25, -52),     S(0, -50),      //
    S(-53, -98),    S(9, -379),     S(-6, -284),    S(33, -224),    S(46, -121),    S(62, -203),    S(54, -182),    S(-17, -64),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(337, -639),   S(276, -128),   S(-88, 5),      S(-171, 65),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(344, -154),   S(51, 112),     S(-30, 158),    S(238, 87),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-15, 53),     S(102, 150),    S(163, 126),    S(195, 78),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-229, 85),    S(26, 135),     S(125, 133),    S(72, 103),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-198, 25),    S(-40, 95),     S(30, 98),      S(-49, 144),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-149, -7),    S(64, 15),      S(-28, 80),     S(-76, 122),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(84, -100),    S(127, -29),    S(22, 33),      S(-82, 91),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-31, -158),   S(80, -122),    S(-33, -82),    S(-17, -99),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
