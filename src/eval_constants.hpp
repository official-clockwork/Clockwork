#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(300, 410);
inline const PParam KNIGHT_MAT = S(1081, 966);
inline const PParam BISHOP_MAT = S(1055, 1028);
inline const PParam ROOK_MAT   = S(1590, 1704);
inline const PParam QUEEN_MAT  = S(3608, 3044);
inline const PParam TEMPO_VAL  = S(56, 16);

inline const PParam BISHOP_PAIR_VAL  = S(81, 175);
inline const PParam DOUBLED_PAWN_VAL = S(-47, -80);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(14, 21), S(55, 33), S(82, 68), S(201, 139), S(496, 288), S(1262, 1009),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(58, 45), S(56, 26), S(63, 52), S(144, 118), S(658, -86),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-55, 2), S(-44, 18), S(-12, 90), S(56, 165), S(94, 297), S(212, 81),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(48, -45), S(28, 1), S(13, 31), S(19, 71), S(83, 154), S(171, 270),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(13, -42), S(-9, 2), S(-33, -19), S(-35, -46), S(-52, -88), S(-226, -141),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(6, 34), S(-34, 39), S(-24, -13), S(-13, -42), S(-8, -37), S(20, -44), S(3, -53),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-169, -91), S(32, -46), S(-6, -6), S(11, 25), S(17, 49), S(40, 47), S(-9, 68),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-203, -268), S(-99, -102), S(-40, -50), S(3, -18), S(50, -3), S(80, 34), S(116, 29), S(152, 18), S(204, -53),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-151, -385), S(-78, -187), S(7, -121), S(36, -75), S(66, -37), S(87, -16), S(104, -6), S(119, 1), S(130, 9), S(138, 0), S(163, -16), S(215, -67), S(243, -83), S(312, -124),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-203, -368), S(-111, -131), S(-57, -59), S(-21, -42), S(7, -16), S(28, 3), S(50, 10), S(81, 8), S(104, 21), S(133, 28), S(161, 27), S(179, 30), S(215, 23), S(232, 7), S(373, -118),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-258, 71), S(-285, -800), S(-191, -665), S(-148, -454), S(-122, -269), S(-87, -180), S(-89, -37), S(-63, -44), S(-54, -5), S(-44, 19), S(-36, 41), S(-29, 60), S(-14, 61), S(-3, 61), S(3, 66), S(21, 52), S(13, 64), S(25, 47), S(48, 12), S(76, -34), S(106, -64), S(134, -135), S(190, -164), S(355, -344), S(338, -366), S(764, -600), S(556, -542), S(1274, -908),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(416, 581), S(142, 376), S(44, 464), S(32, 497), S(9, 490), S(-27, 492), S(-3, 487), S(-8, 468), S(-7, 398),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(83, -31), S(153, -75),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(36, -2), S(142, -42),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(65, -44), S(67, -67), S(110, -71), S(144, -135),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-42, 34), S(-59, 44), S(-6, -4), S(146, -89), S(342, -232),
};

inline const PParam PAWN_THREAT_KNIGHT = S(227, 78);
inline const PParam PAWN_THREAT_BISHOP = S(200, 107);
inline const PParam PAWN_THREAT_ROOK   = S(191, 55);
inline const PParam PAWN_THREAT_QUEEN  = S(161, -49);

inline const PParam KNIGHT_THREAT_BISHOP = S(102, 73);
inline const PParam KNIGHT_THREAT_ROOK   = S(236, -1);
inline const PParam KNIGHT_THREAT_QUEEN  = S(147, -73);

inline const PParam BISHOP_THREAT_KNIGHT = S(107, 26);
inline const PParam BISHOP_THREAT_ROOK   = S(238, 52);
inline const PParam BISHOP_THREAT_QUEEN  = S(190, 57);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(198, 392),    S(216, 439),    S(248, 417),    S(313, 285),    S(233, 297),    S(233, 360),    S(156, 373),    S(197, 348),    //
    S(32, -35),     S(165, -14),    S(133, -69),    S(135, -127),   S(92, -141),    S(35, -97),     S(6, -49),      S(-57, -48),    //
    S(-29, -76),    S(0, -73),      S(9, -116),     S(-5, -131),    S(-18, -138),   S(-57, -132),   S(-94, -82),    S(-127, -64),   //
    S(-35, -133),   S(-14, -102),   S(-19, -139),   S(-31, -138),   S(-52, -147),   S(-83, -130),   S(-134, -81),   S(-154, -95),   //
    S(-52, -161),   S(17, -159),    S(-34, -117),   S(-66, -110),   S(-80, -122),   S(-123, -125),  S(-137, -107),  S(-170, -113),  //
    S(-43, -157),   S(91, -153),    S(45, -121),    S(-12, -102),   S(-49, -116),   S(-85, -117),   S(-108, -89),   S(-147, -105),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-401, -101),  S(-339, 34),    S(-408, 218),   S(-144, 80),    S(-290, 102),   S(-367, 120),   S(-571, 64),    S(-519, 10),    //
    S(-7, -1),      S(70, 10),      S(165, -53),    S(105, 14),     S(117, 22),     S(48, -2),      S(-2, 8),       S(-27, -36),    //
    S(55, -25),     S(100, 38),     S(193, 37),     S(144, 53),     S(155, 41),     S(60, 52),      S(61, 17),      S(-31, 19),     //
    S(96, 14),      S(81, 51),      S(116, 66),     S(110, 88),     S(114, 72),     S(71, 76),      S(31, 24),      S(31, 11),      //
    S(99, 0),       S(109, 7),      S(101, 41),     S(90, 46),      S(80, 60),      S(68, 58),      S(40, 18),      S(35, -48),     //
    S(5, -21),      S(22, -29),     S(18, -11),     S(31, 39),      S(39, 35),      S(-20, 10),     S(-7, -37),     S(-47, -45),    //
    S(5, -3),       S(36, -27),     S(13, -26),     S(14, -10),     S(1, -18),      S(-27, -33),    S(-8, -48),     S(-77, -122),   //
    S(-38, -62),    S(9, -35),      S(23, -44),     S(32, -38),     S(26, -27),     S(-22, -63),    S(-40, -43),    S(-90, -83),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-142, 87),    S(-160, 59),    S(-384, 84),    S(-307, 114),   S(-235, 106),   S(-415, 130),   S(-125, 101),   S(-87, 90),     //
    S(36, -19),     S(27, 51),      S(29, 41),      S(25, 23),      S(12, 43),      S(25, 42),      S(0, 42),       S(-37, 36),     //
    S(51, 44),      S(120, 39),     S(227, 33),     S(142, 34),     S(119, 32),     S(90, 51),      S(138, 27),     S(18, 43),      //
    S(68, -4),      S(69, 50),      S(132, 38),     S(141, 63),     S(146, 62),     S(78, 62),      S(51, 47),      S(-3, 31),      //
    S(64, -24),     S(91, 6),       S(91, 30),      S(106, 51),     S(94, 70),      S(50, 62),      S(30, 18),      S(19, -33),     //
    S(84, -36),     S(129, -9),     S(128, -2),     S(67, 40),      S(55, 48),      S(41, 45),      S(82, -1),      S(49, -39),     //
    S(69, -68),     S(118, -43),    S(96, -37),     S(67, -2),      S(56, -24),     S(56, -27),     S(29, -22),     S(58, -80),     //
    S(70, -48),     S(64, -4),      S(71, -7),      S(85, -43),     S(95, -50),     S(80, -15),     S(77, -36),     S(49, -30),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(140, 46),     S(208, 41),     S(126, 75),     S(135, 70),     S(153, 51),     S(96, 66),      S(110, 69),     S(127, 69),     //
    S(76, 91),      S(162, 68),     S(224, 48),     S(169, 80),     S(177, 73),     S(129, 83),     S(77, 99),      S(58, 110),     //
    S(59, 70),      S(199, 37),     S(240, 24),     S(264, 10),     S(220, 22),     S(132, 65),     S(153, 51),     S(25, 106),     //
    S(10, 61),      S(84, 50),      S(125, 47),     S(168, 3),      S(135, 28),     S(64, 80),      S(39, 76),      S(-35, 89),     //
    S(-61, 20),     S(23, 27),      S(19, 36),      S(21, 32),      S(16, 27),      S(-18, 77),     S(-49, 76),     S(-65, 61),     //
    S(-88, 0),      S(-12, -27),    S(-17, -1),     S(-33, 6),      S(-11, -14),    S(-62, 35),     S(-64, 21),     S(-85, 15),     //
    S(-134, 2),     S(-42, -46),    S(-20, -32),    S(-6, -32),     S(-12, -28),    S(-32, -14),    S(-51, -35),    S(-93, -18),    //
    S(-111, 10),    S(-72, 15),     S(-26, -19),    S(5, -33),      S(-2, -21),     S(-15, -14),    S(-36, -19),    S(-68, -1),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(54, 75),      S(81, 41),      S(76, 69),      S(-48, 199),    S(39, 97),      S(-35, 145),    S(41, 48),      S(0, 60),       //
    S(38, 122),     S(-40, 211),    S(-38, 268),    S(-109, 292),   S(-93, 240),    S(-113, 248),   S(-51, 142),    S(-17, 83),     //
    S(-7, 147),     S(77, 157),     S(35, 221),     S(14, 227),     S(-21, 207),    S(-65, 214),    S(11, 113),     S(-24, 79),     //
    S(42, 76),      S(37, 161),     S(11, 182),     S(13, 239),     S(-12, 222),    S(-13, 152),    S(1, 83),       S(-1, 34),      //
    S(17, 103),     S(54, 58),      S(28, 123),     S(2, 173),      S(-15, 167),    S(-12, 122),    S(-7, 53),      S(-4, 5),       //
    S(30, -75),     S(53, -18),     S(39, 58),      S(-7, 86),      S(12, 32),      S(11, 45),      S(21, -26),     S(-3, -14),     //
    S(17, -183),    S(49, -282),    S(36, -139),    S(52, -59),     S(24, -43),     S(41, -120),    S(21, -52),     S(10, -55),     //
    S(-33, -86),    S(37, -350),    S(31, -349),    S(66, -257),    S(59, -174),    S(68, -213),    S(45, -171),    S(-9, -85),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-113, -418),  S(124, -60),    S(-72, 10),     S(-152, 40),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(213, -140),   S(-12, 131),    S(8, 135),      S(146, 79),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-50, 40),     S(71, 129),     S(90, 105),     S(84, 67),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-278, 67),    S(28, 88),      S(24, 93),      S(-32, 72),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-235, 20),    S(-50, 64),     S(-25, 66),     S(-105, 104),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-153, -3),    S(41, 8),       S(-50, 59),     S(-92, 89),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(70, -95),     S(120, -31),    S(33, 12),      S(-44, 58),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-52, -134),   S(81, -117),    S(-6, -85),     S(-28, -77),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
