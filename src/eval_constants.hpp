#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(299, 423);
inline const PParam KNIGHT_MAT = S(1045, 983);
inline const PParam BISHOP_MAT = S(1033, 1042);
inline const PParam ROOK_MAT   = S(1563, 1748);
inline const PParam QUEEN_MAT  = S(3518, 3132);
inline const PParam TEMPO_VAL  = S(52, 17);

inline const PParam BISHOP_PAIR_VAL  = S(72, 185);
inline const PParam DOUBLED_PAWN_VAL = S(-46, -75);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, -1);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(6, 23), S(54, 32), S(83, 69), S(199, 135), S(473, 329), S(1604, 976),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(54, 49), S(53, 26), S(59, 45), S(126, 106), S(748, -180),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-26, 29), S(-28, 38), S(-15, 87), S(56, 142), S(104, 252), S(195, 56),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(49, -26), S(22, 13), S(0, 48), S(8, 90), S(98, 161), S(171, 296),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(15, -38), S(-7, 3), S(-29, -29), S(-26, -75), S(-69, -111), S(-225, -146),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-241, -224), S(-116, -96), S(-50, -33), S(4, -14), S(51, 1), S(77, 43), S(111, 36), S(141, 32), S(187, -43),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-156, -353), S(-73, -190), S(6, -123), S(23, -66), S(57, -32), S(71, -9), S(92, 0), S(103, 8), S(112, 18), S(119, 9), S(144, -4), S(192, -51), S(230, -77), S(293, -111),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-168, -388), S(-101, -119), S(-44, -52), S(-17, -45), S(4, -14), S(24, 1), S(42, 10), S(74, 7), S(98, 17), S(124, 27), S(151, 28), S(163, 34), S(207, 23), S(209, 16), S(323, -87),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(77, 106), S(-343, -930), S(-202, -574), S(-156, -345), S(-122, -259), S(-88, -188), S(-106, -15), S(-72, -49), S(-66, -2), S(-58, 17), S(-51, 42), S(-46, 66), S(-26, 56), S(-15, 59), S(-10, 64), S(12, 46), S(2, 61), S(8, 50), S(28, 23), S(60, -29), S(87, -59), S(109, -117), S(203, -188), S(368, -357), S(279, -334), S(827, -643), S(627, -530), S(1358, -971),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(290, 895), S(124, 408), S(38, 478), S(31, 509), S(7, 501), S(-23, 486), S(-2, 491), S(-1, 464), S(31, 357),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(86, -37), S(152, -83),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(32, -2), S(141, -44),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -61), S(79, -76), S(124, -74), S(137, -131),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-49, 35), S(-65, 46), S(4, -19), S(165, -107), S(392, -263),
};

inline const PParam PAWN_THREAT_KNIGHT = S(220, 65);
inline const PParam PAWN_THREAT_BISHOP = S(187, 87);
inline const PParam PAWN_THREAT_ROOK   = S(180, 36);
inline const PParam PAWN_THREAT_QUEEN  = S(154, -71);

inline const PParam KNIGHT_THREAT_BISHOP = S(89, 71);
inline const PParam KNIGHT_THREAT_ROOK   = S(236, -13);
inline const PParam KNIGHT_THREAT_QUEEN  = S(142, -79);

inline const PParam BISHOP_THREAT_KNIGHT = S(95, 20);
inline const PParam BISHOP_THREAT_ROOK   = S(217, 46);
inline const PParam BISHOP_THREAT_QUEEN  = S(179, 33);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(132, 426),    S(109, 469),    S(196, 430),    S(339, 245),    S(253, 262),    S(277, 349),    S(158, 376),    S(248, 359),    //
    S(30, -17),     S(173, 12),     S(119, -64),    S(154, -152),   S(78, -155),    S(21, -88),     S(-28, -16),    S(-47, -34),    //
    S(-40, -65),    S(-15, -61),    S(-8, -110),    S(-28, -131),   S(-43, -131),   S(-78, -130),   S(-103, -72),   S(-127, -46),   //
    S(-39, -132),   S(-18, -102),   S(-35, -144),   S(-44, -143),   S(-68, -153),   S(-95, -134),   S(-139, -71),   S(-153, -86),   //
    S(-46, -167),   S(21, -167),    S(-38, -122),   S(-81, -112),   S(-85, -127),   S(-132, -127),  S(-138, -107),  S(-172, -107),  //
    S(-38, -168),   S(107, -168),   S(44, -129),    S(-29, -104),   S(-63, -128),   S(-94, -121),   S(-113, -86),   S(-147, -103),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-407, -133),  S(-164, -31),   S(-475, 305),   S(-68, 76),     S(-269, 104),   S(-337, 149),   S(-555, 42),    S(-526, 2),     //
    S(15, -3),      S(119, 22),     S(202, -57),    S(71, 54),      S(111, 36),     S(46, 9),       S(-5, 10),      S(-2, -36),     //
    S(46, -3),      S(50, 89),      S(213, 52),     S(113, 86),     S(152, 51),     S(46, 63),      S(49, 28),      S(-51, 27),     //
    S(117, 30),     S(67, 77),      S(101, 84),     S(91, 105),     S(97, 84),      S(71, 84),      S(23, 21),      S(10, 33),      //
    S(91, 16),      S(106, 25),     S(100, 51),     S(68, 59),      S(69, 67),      S(64, 72),      S(16, 38),      S(36, -61),     //
    S(13, -20),     S(29, -34),     S(16, -17),     S(27, 46),      S(41, 39),      S(-25, 5),      S(-10, -28),    S(-52, -36),    //
    S(25, 4),       S(57, -39),     S(10, -21),     S(6, -2),       S(-6, -16),     S(-34, -35),    S(-1, -54),     S(-85, -156),   //
    S(-33, -37),    S(14, -47),     S(22, -56),     S(45, -39),     S(23, -17),     S(-37, -75),    S(-34, -57),    S(-72, -103),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-187, 126),   S(-148, 59),    S(-466, 104),   S(-290, 121),   S(-262, 127),   S(-429, 135),   S(-78, 100),    S(-37, 71),     //
    S(19, -12),     S(34, 54),      S(34, 57),      S(44, 20),      S(31, 35),      S(23, 45),      S(-14, 46),     S(-43, 42),     //
    S(45, 62),      S(83, 66),      S(255, 40),     S(149, 31),     S(105, 38),     S(55, 76),      S(158, 24),     S(13, 64),      //
    S(53, 9),       S(53, 64),      S(140, 47),     S(145, 61),     S(142, 72),     S(73, 69),      S(53, 48),      S(-16, 49),     //
    S(39, -13),     S(74, 24),      S(80, 36),      S(100, 57),     S(97, 81),      S(38, 74),      S(31, 14),      S(20, -42),     //
    S(73, -32),     S(127, -4),     S(122, 2),      S(51, 50),      S(42, 61),      S(31, 61),      S(91, 0),       S(47, -47),     //
    S(65, -69),     S(118, -37),    S(85, -36),     S(56, 6),       S(45, -21),     S(56, -30),     S(20, -8),      S(46, -100),    //
    S(53, -33),     S(51, 4),       S(44, 11),      S(55, -37),     S(68, -54),     S(63, -9),      S(64, -52),     S(28, -29),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(134, 44),     S(226, 37),     S(116, 83),     S(115, 83),     S(133, 61),     S(78, 71),      S(101, 68),     S(128, 62),     //
    S(100, 92),     S(177, 70),     S(234, 55),     S(176, 90),     S(180, 87),     S(110, 96),     S(69, 102),     S(60, 110),     //
    S(54, 78),      S(253, 31),     S(268, 17),     S(273, 15),     S(207, 34),     S(119, 72),     S(155, 51),     S(17, 102),     //
    S(9, 74),       S(71, 64),      S(116, 54),     S(165, 2),      S(125, 33),     S(57, 88),      S(36, 82),      S(-56, 92),     //
    S(-81, 21),     S(38, 19),      S(22, 33),      S(20, 30),      S(13, 25),      S(-21, 77),     S(-58, 74),     S(-87, 61),     //
    S(-110, 11),    S(12, -50),     S(-10, -9),     S(-36, 2),      S(2, -30),      S(-72, 36),     S(-82, 20),     S(-92, 4),      //
    S(-143, 17),    S(-52, -36),    S(-14, -41),    S(-6, -36),     S(-17, -26),    S(-38, -15),    S(-75, -36),    S(-105, -26),   //
    S(-112, 12),    S(-76, 18),     S(-31, -14),    S(1, -34),      S(-7, -21),     S(-17, -18),    S(-41, -26),    S(-72, -9),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(30, 114),     S(32, 88),      S(85, 70),      S(-67, 212),    S(12, 116),     S(-79, 174),    S(37, 56),      S(-13, 43),     //
    S(78, 96),      S(-68, 234),    S(-60, 295),    S(-123, 302),   S(-91, 234),    S(-131, 255),   S(-66, 138),    S(-22, 55),     //
    S(-22, 169),    S(91, 165),     S(57, 200),     S(11, 238),     S(-35, 216),    S(-77, 221),    S(12, 92),      S(-23, 55),     //
    S(57, 64),      S(46, 143),     S(18, 174),     S(15, 230),     S(-12, 224),    S(-15, 144),    S(10, 55),      S(-8, 37),      //
    S(21, 111),     S(63, 50),      S(27, 137),     S(-2, 182),     S(-17, 172),    S(-14, 127),    S(-10, 40),     S(-8, -6),      //
    S(50, -117),    S(54, -13),     S(44, 58),      S(-16, 96),     S(9, 38),       S(6, 41),       S(25, -46),     S(-9, -22),     //
    S(42, -236),    S(48, -285),    S(26, -128),    S(48, -51),     S(10, -23),     S(45, -129),    S(24, -54),     S(0, -63),      //
    S(-51, -103),   S(2, -346),     S(8, -325),     S(37, -239),    S(49, -140),    S(65, -222),    S(60, -184),    S(-14, -97),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(330, -633),   S(280, -123),   S(-64, -12),    S(-76, 28),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(279, -167),   S(73, 100),     S(11, 139),     S(213, 80),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-20, 40),     S(94, 139),     S(175, 112),    S(187, 73),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-212, 60),    S(66, 116),     S(109, 120),    S(94, 91),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-187, 14),    S(-29, 87),     S(32, 91),      S(-29, 133),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-147, -13),   S(57, 14),      S(-28, 77),     S(-68, 115),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(83, -110),    S(125, -29),    S(25, 28),      S(-69, 84),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-41, -162),   S(80, -126),    S(-27, -86),    S(-19, -99),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
