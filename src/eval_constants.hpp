#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(306, 321);
inline const PParam KNIGHT_MAT = S(1122, 912);
inline const PParam BISHOP_MAT = S(1236, 963);
inline const PParam ROOK_MAT   = S(1714, 1683);
inline const PParam QUEEN_MAT  = S(3654, 2886);
inline const PParam TEMPO_VAL  = S(59, 15);

inline const PParam BISHOP_PAIR_VAL  = S(80, 177);
inline const PParam ROOK_OPEN_VAL  = S(103, -30);
inline const PParam ROOK_SEMIOPEN_VAL  = S(39, 12);

inline const PParam DOUBLED_PAWN_VAL = S(-39, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(19, 20), S(62, 33), S(78, 69), S(197, 137), S(568, 243), S(931, 1102),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(63, 44), S(61, 30), S(66, 56), S(147, 120), S(698, -86),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-70, -97), S(-58, -79), S(-32, -4), S(24, 74), S(55, 213), S(295, 309),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(52, -45), S(37, -7), S(18, 28), S(20, 76), S(86, 153), S(143, 297),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(17, -45), S(3, 3), S(-2, -23), S(-2, -44), S(-8, -94), S(-190, -146),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(15, 98), S(-18, 85), S(-11, 34), S(2, 5), S(12, 9), S(42, 7), S(20, -4),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-189, -49), S(29, -3), S(-11, 44), S(9, 75), S(14, 99), S(35, 98), S(-13, 118),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-229, -224), S(-122, -60), S(-63, -6), S(-17, 27), S(32, 42), S(61, 81), S(100, 77), S(138, 78), S(188, 19),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-235, -280), S(-161, -95), S(-84, -34), S(-49, 15), S(-18, 44), S(-2, 64), S(15, 78), S(31, 82), S(47, 84), S(56, 76), S(73, 61), S(134, 7), S(159, -20), S(213, -54),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-317, -249), S(-155, -83), S(-102, -19), S(-70, -10), S(-44, 13), S(-29, 36), S(-11, 48), S(6, 55), S(23, 68), S(41, 77), S(59, 79), S(71, 82), S(92, 86), S(102, 73), S(247, -54),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-991, -892), S(-249, -638), S(-148, -525), S(-97, -312), S(-87, -110), S(-50, -2), S(-46, 105), S(-22, 119), S(-17, 174), S(-5, 199), S(3, 224), S(9, 238), S(27, 231), S(37, 242), S(43, 237), S(57, 233), S(63, 225), S(62, 231), S(88, 187), S(110, 150), S(124, 131), S(167, 66), S(179, 58), S(340, -116), S(373, -158), S(598, -301), S(310, -142), S(356, -170),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(414, 42), S(101, -123), S(-3, -33), S(-19, 4), S(-46, 7), S(-81, 13), S(-60, 14), S(-70, 8), S(-71, -39),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(81, -30), S(151, -75),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(36, -4), S(140, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -48), S(53, -64), S(104, -64), S(161, -129),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-39, 31), S(-59, 42), S(-2, -5), S(161, -95), S(360, -240),
};

inline const PParam PAWN_THREAT_KNIGHT = S(233, 69);
inline const PParam PAWN_THREAT_BISHOP = S(210, 112);
inline const PParam PAWN_THREAT_ROOK   = S(192, 54);
inline const PParam PAWN_THREAT_QUEEN  = S(170, -58);

inline const PParam KNIGHT_THREAT_BISHOP = S(104, 69);
inline const PParam KNIGHT_THREAT_ROOK   = S(244, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(154, -69);

inline const PParam BISHOP_THREAT_KNIGHT = S(109, 25);
inline const PParam BISHOP_THREAT_ROOK   = S(242, 49);
inline const PParam BISHOP_THREAT_QUEEN  = S(190, 48);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-2, -11), S(-6, -2), S(-5, -12), S(-10, -22), S(-16, -27), S(-20, -34), S(-21, -41), S(-27, -40), S(-36, -47),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(110, 161),    S(100, 208),    S(172, 173),    S(235, 53),     S(180, 47),     S(164, 113),    S(58, 137),     S(117, 115),    //
    S(67, 37),      S(186, 62),     S(162, 5),      S(165, -51),    S(117, -68),    S(61, -20),     S(22, 27),      S(-33, 32),     //
    S(-12, 5),      S(11, 8),       S(31, -36),     S(19, -51),     S(1, -55),      S(-41, -48),    S(-85, 0),      S(-115, 22),    //
    S(-36, -43),    S(-12, -15),    S(-16, -48),    S(-30, -48),    S(-56, -56),    S(-81, -45),    S(-132, 3),     S(-156, -8),    //
    S(-40, -72),    S(28, -70),     S(-19, -26),    S(-50, -22),    S(-71, -31),    S(-111, -33),   S(-131, -19),   S(-160, -27),   //
    S(-30, -67),    S(101, -63),    S(57, -27),     S(0, -8),       S(-38, -21),    S(-74, -26),    S(-101, -1),    S(-139, -15),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-377, -159),  S(-333, 56),    S(-444, 233),   S(-107, 63),    S(-237, 87),    S(-325, 95),    S(-550, 82),    S(-521, -17),   //
    S(15, -5),      S(79, 5),       S(177, -63),    S(126, 1),      S(127, 8),      S(62, -14),     S(6, 5),        S(-10, -38),    //
    S(74, -28),     S(114, 24),     S(200, 16),     S(155, 36),     S(155, 25),     S(69, 34),      S(65, 7),       S(-28, 10),     //
    S(119, 12),     S(90, 45),      S(123, 49),     S(109, 73),     S(119, 60),     S(81, 55),      S(52, 13),      S(45, 10),      //
    S(109, -1),     S(129, -5),     S(114, 22),     S(93, 35),      S(83, 46),      S(75, 42),      S(57, 9),       S(49, -45),     //
    S(18, -27),     S(40, -40),     S(32, -21),     S(44, 22),      S(51, 20),      S(-5, -2),      S(3, -40),      S(-29, -45),    //
    S(26, -11),     S(46, -41),     S(25, -36),     S(25, -16),     S(12, -22),     S(-15, -43),    S(1, -56),      S(-55, -124),   //
    S(-17, -61),    S(17, -18),     S(34, -44),     S(43, -36),     S(35, -28),     S(-10, -59),    S(-22, -33),    S(-69, -85),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-163, 64),    S(-186, 47),    S(-429, 73),    S(-307, 86),    S(-258, 91),    S(-425, 117),   S(-170, 94),    S(-119, 67),    //
    S(5, -45),      S(-7, 36),      S(9, 16),       S(-8, 18),      S(-35, 35),     S(3, 27),       S(-17, 18),     S(-58, 16),     //
    S(35, 13),      S(94, 19),      S(179, 28),     S(108, 24),     S(86, 26),      S(58, 41),      S(111, 12),     S(-3, 17),      //
    S(40, -24),     S(45, 34),      S(100, 30),     S(108, 57),     S(118, 55),     S(49, 52),      S(19, 35),      S(-24, 14),     //
    S(45, -53),     S(63, -3),      S(68, 20),      S(73, 44),      S(67, 62),      S(18, 52),      S(7, 10),       S(-6, -48),     //
    S(61, -51),     S(102, -28),    S(108, -15),    S(50, 27),      S(31, 32),      S(30, 29),      S(59, -14),     S(26, -48),     //
    S(48, -87),     S(99, -63),     S(69, -50),     S(41, -20),     S(31, -35),     S(33, -46),     S(15, -32),     S(34, -97),     //
    S(46, -70),     S(32, -23),     S(37, -17),     S(48, -52),     S(56, -62),     S(52, -20),     S(45, -49),     S(27, -51),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(107, 8),      S(171, 7),      S(101, 37),     S(103, 31),     S(109, 20),     S(58, 33),      S(65, 36),      S(74, 41),      //
    S(16, 66),      S(101, 41),     S(176, 18),     S(103, 61),     S(119, 49),     S(66, 58),      S(5, 77),       S(-2, 83),      //
    S(4, 43),       S(153, 1),      S(181, -3),     S(182, -7),     S(137, 2),      S(63, 42),      S(80, 30),      S(-38, 81),     //
    S(-33, 36),     S(33, 27),      S(65, 19),      S(93, -19),     S(61, 6),       S(-1, 53),      S(-23, 55),     S(-83, 63),     //
    S(-98, -11),    S(-20, -10),    S(-37, 5),      S(-50, 7),      S(-56, 3),      S(-75, 44),     S(-103, 41),    S(-118, 32),    //
    S(-119, -31),   S(-47, -61),    S(-51, -32),    S(-72, -30),    S(-55, -48),    S(-105, 4),     S(-108, -11),   S(-127, -13),   //
    S(-178, -21),   S(-79, -82),    S(-55, -67),    S(-51, -65),    S(-58, -60),    S(-77, -44),    S(-97, -66),    S(-129, -48),   //
    S(-142, -17),   S(-112, -13),   S(-58, -49),    S(-33, -67),    S(-47, -52),    S(-59, -40),    S(-75, -48),    S(-92, -30),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(43, 37),      S(81, 3),       S(85, 10),      S(-33, 139),    S(38, 56),      S(-18, 84),     S(48, 0),       S(-14, 22),     //
    S(30, 75),      S(-42, 169),    S(-47, 225),    S(-135, 257),   S(-105, 202),   S(-117, 201),   S(-68, 106),    S(-32, 46),     //
    S(-9, 105),     S(79, 101),     S(17, 180),     S(0, 190),      S(-39, 171),    S(-73, 172),    S(-1, 66),      S(-35, 39),     //
    S(39, 36),      S(33, 112),     S(2, 140),      S(-5, 202),     S(-24, 182),    S(-36, 122),    S(-4, 36),      S(-5, -7),      //
    S(6, 60),       S(38, 23),      S(10, 94),      S(-20, 142),    S(-34, 131),    S(-31, 91),     S(-18, 13),     S(-13, -37),    //
    S(25, -107),    S(44, -58),     S(47, 7),       S(-6, 34),      S(6, -10),      S(10, -6),      S(19, -72),     S(0, -69),      //
    S(13, -213),    S(45, -313),    S(34, -179),    S(49, -106),    S(23, -87),     S(41, -160),    S(15, -96),     S(0, -95),      //
    S(-41, -134),   S(20, -386),    S(17, -375),    S(44, -281),    S(46, -198),    S(50, -244),    S(37, -205),    S(-16, -127),   //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-149, -374),  S(88, -17),     S(-68, 34),     S(-178, 59),    S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(194, -114),   S(4, 145),      S(20, 131),     S(125, 61),     S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(-39, 57),     S(65, 136),     S(103, 105),    S(88, 60),      S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(-260, 81),    S(28, 96),      S(19, 93),      S(-35, 78),     S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(-232, 39),    S(-47, 68),     S(-32, 74),     S(-114, 109),   S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(-137, 8),     S(54, 11),      S(-35, 62),     S(-79, 88),     S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(80, -83),     S(134, -42),    S(46, 4),       S(-36, 48),     S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(-43, -111),   S(87, -101),    S(-13, -65),    S(-30, -64),    S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
};
// Epoch duration: 71.1385s
// clang-format on
}
